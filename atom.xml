<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-28T06:25:50.553Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>rubyliuqq</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Matterjs 基础知识</title>
    <link href="http://yoursite.com/2019/02/27/%5BMattarJS%5DMatterjs%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2019/02/27/[MattarJS]Matterjs基础知识/</id>
    <published>2019-02-27T08:50:29.000Z</published>
    <updated>2019-03-28T06:25:50.553Z</updated>
    
    <content type="html"><![CDATA[<p>Matter.js 是一个用于 Web 的 JavaScript 2D 物理引擎库</p><h2 id="Matter-js-支持的特性"><a href="#Matter-js-支持的特性" class="headerlink" title="Matter.js 支持的特性"></a>Matter.js 支持的特性</h2><table><thead><tr><th>刚体</th><th style="text-align:right">复合体</th><th style="text-align:center">复合材料</th></tr></thead><tbody><tr><td>凹面和凸面</td><td style="text-align:right">物理特性（质量、面积、密度等）</td><td style="text-align:center">弹性（弹性和非弹性碰撞）</td></tr><tr><td>碰撞（粗略阶段、中间阶段、精细阶段）</td><td style="text-align:right">稳定的堆叠和静止</td><td style="text-align:center">动量守恒</td></tr><tr><td>摩擦力和阻力</td><td style="text-align:right">事件监听</td><td style="text-align:center">约束</td></tr><tr><td>重力</td><td style="text-align:right">睡眠和静态物体</td><td style="text-align:center">圆角（倒角）</td></tr><tr><td>视图（平移、缩放）</td><td style="text-align:right">碰撞查询（射线追踪、区域测试）</td><td style="text-align:center">时间缩放（减速、加速）</td></tr><tr><td>Canvas 渲染器（支持向量和纹理）</td><td style="text-align:right">MatterTools 工具（创建、测试和调试）</td><td style="text-align:center">世界状态序列化，需要 resurrect.js</td></tr><tr><td>跨浏览器（Chrome、Firefox、Safari、IE8+）</td><td style="text-align:right">兼容移动端（触摸、响应）</td><td style="text-align:center">原生 JS 实现</td></tr></tbody></table><h2 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h2><h3 id="1、Engine、Render、World、Bodies"><a href="#1、Engine、Render、World、Bodies" class="headerlink" title="1、Engine、Render、World、Bodies"></a>1、Engine、Render、World、Bodies</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建引擎，渲染器，添加世界，生成身体模型。</span></span><br><span class="line"><span class="comment">// Engine是引擎，Render是渲染器，World是表演环境，Bodies可以用来创建各种形状的物体。</span></span><br><span class="line"><span class="keyword">var</span> Engine = Matter.Engine,</span><br><span class="line">    Render = Matter.Render,</span><br><span class="line">    World = Matter.World,</span><br><span class="line">    Bodies = Matter.Bodies</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建引擎实例与引擎世界。</span></span><br><span class="line"><span class="keyword">var</span> engine = Engine.create(),</span><br><span class="line">    world = engine.world</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建渲染器实例。</span></span><br><span class="line"><span class="comment">// render(渲染器)将要渲染的物理引擎是之前所创建的engine，而渲染的对象是html网页的body。</span></span><br><span class="line"><span class="keyword">var</span> render = Render.create(&#123;</span><br><span class="line">    engine: engine,</span><br><span class="line">    element: <span class="built_in">document</span>.body</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行渲染器，运行引擎。</span></span><br><span class="line">Engine.run(engine)</span><br><span class="line">Render.run(render)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加物体</span></span><br><span class="line"><span class="keyword">var</span> boxA = Bodies.rectangle(<span class="number">500</span>, <span class="number">170</span>, <span class="number">40</span>, <span class="number">260</span>), <span class="comment">// 矩形物体。刷新时会自由落体。500和170是矩形的中心所在位置</span></span><br><span class="line">  ground = Bodies.rectangle(<span class="number">400</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">100</span>, &#123; <span class="attr">isStatic</span>: <span class="literal">true</span> &#125;) <span class="comment">// 生成地面，isStatic表示静止</span></span><br><span class="line">World.add(world,[boxA,ground]) <span class="comment">// 将物体添加到World世界之中。</span></span><br></pre></td></tr></table></figure><p><code>Matter.Engine</code> 模块包含了创建和处理引擎的方法，引擎是负责管理和更新模拟世界的控制器，引擎可以控制时间的缩放，可以检测所有的碰撞事件，并且拿到所有碰撞的物体对（pairs）。</p><p>在 Matter.js 中任何的物体都需要一个容身处，而存放这些物体的地方，我们称之为世界，物体必须添加到世界里，然后由引擎运行这个世界。而创建世界需要使用到 <code>Matter.World</code> 模块，该模块包含了用于创建和操作世界的方法，一个 Matter.World 相当于一个复合物体，物体、约束、复合物体的聚合体，其次世界还有额外的一些属性，比如重力、边界。</p><p><code>Matter.Render</code> 是将实例渲染到 Canvas 中的渲染器，控制视图层的样式，它的主要作用是用于开发和调试，默认情况下 Matter.Render 将只显示物体的线框（轮廓），这对于开发和调试很有帮助，但如果需要使用到全局实体渲染则需要将线框模式关闭 <code>render.options.wireframes = false</code>，另外它同样也适合制作一些简单的游戏，因为它包括了一些绘图选项、线框、向量、Sprite 精灵和视窗功能。</p><p>物体或者叫刚体，在物理引擎里特指坚硬的物体，具有固定的形状，不能形变。<br>刚体可以用于表示一个箱子、一个球或是一块木头，每个物体都有自己的物理属性，质量、速度、摩擦力、角度等，还可以设置刚体的标记。<br><code>Matter.Bodies</code> 模块中内置了几种刚体，<code>矩形 Matter.rectangle</code>、<code>多边形 Matter.polygon</code>、<code>圆形 Matter.circle</code> 、<code>梯形 Matter.trapezoid</code> 等等。</p><h3 id="2、Constraint（约束）"><a href="#2、Constraint（约束）" class="headerlink" title="2、Constraint（约束）"></a>2、Constraint（约束）</h3><p>约束可理解为通过一条线，将刚体 A 和刚体 B 两个刚体连接起来，被约束的两个刚体由于被连接在了一起，移动就相互受到了限制。<br><code>Matter.Constraint</code>模块包含了用于创建和处理约束的方法，这个约束可以很宽松，也可以很紧绷，还可以定义约束的距离，约束具有弹性，可以用来当作橡皮筋。<br><code>Constraint.create(bodyA, pointA, bodyB, pointB, length, stiffness)</code><br>pointA和pointB为两个向量，如果不赋值，则默认为0向量，物体的约束点默认在中心位置，否则，物体的对应的约束点为中心位置加上所赋的向量值。</p><h3 id="3、Composites（复合体）"><a href="#3、Composites（复合体）" class="headerlink" title="3、Composites（复合体）"></a>3、Composites（复合体）</h3><p>由刚体和复合材料通过约束组合在一起的就叫做复合体。<br>复合体对外当作一个刚体，复合体的物理属性是通过所包含的刚体的属性综合计算出来的。<br><code>Matter.Composite</code> 模块包含用于创建和处理复合体的方法，另外还有一个 Matter.Composites 模块，提供了几种特别的复合材料，例如 <code>链 Composites.chain</code>、<code>牛顿摆球 Composites.newtonsCradle</code>、<code>软体 Composites.softBody</code>、<code>汽车 Composites.car</code> 、<code>堆叠 Composites.stack</code> 等等。</p><p><code>Composites.chain()</code>可以将已有的stack物体堆链接在一起，构成一个整体，里面的参数为已有的物体堆stack，链接点距离物体中心的x和y方向的偏移量。<br><code>Composites.chain = function(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options)</code><br>参数composite即为传入的物体堆，从第一个物体开始，到倒数第二个物体截止，每个物体和下一个物体链接。<br>xOffsetA, yOffsetA为每对链接的第一个物体的链接点距离中心位置的偏移<code>百分比</code>，之所以是百分比，是因为pointA: { x: bodyAWidth <em> xOffsetA, y: bodyAHeight </em> yOffsetA }，<br>pointA的x和y属性为实际的偏移量，是由物体的实际宽度乘以偏移百分比而得到。</p><p><code>堆叠 Composites.stack(xx, yy, columns, rows, columnGap, rowGap, callback)</code><br>xx, yy分别为物体堆中第一个物体的x和y坐标<br>columns 和rows 分别为所要创建的物体堆的列数和行数<br>columnGap 和rowGap 分别为物体与物体之间的列间隙和行间隙<br>var body = callback(x, y, column, row, lastBody, i); 可以看出callback为生成的具体物体的方法。</p><p><code>牛顿摆球 Composites.newtonsCradle(x, y, num, radius, lineLen)</code>为内置函数，可以生产牛顿摆<br>其中：x, y为第一个摆球的横纵坐标，num为摆球的个数，radius为半径，lineLen为绳子长度</p><p><code>软体 Composites.softBody(xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions)</code><br>particleRadius: 球半径<br>crossBrace<br>particleOptions<br>constraintOptions</p><p><code>Composites.car(xx, yy, width, height, raduis)函数，可以生成简易小车。由一个矩形和两个圆形构成。两个圆形的圆心在矩形的两条宽的中心。</code><br>xx, yy 两个参数为小车中心的x坐标和y坐标<br>width, height 为矩形车身的长和宽<br>raduis 为轮子的半径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Composites.stack 堆叠</span></span><br><span class="line"><span class="keyword">var</span> stackRect = Composites.stack(<span class="number">250</span>, <span class="number">100</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Bodies.rectangle(x, y, <span class="number">80</span>, <span class="number">20</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> stackCircle = Composites.stack(<span class="number">380</span>, <span class="number">100</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Bodies.circle(x, y, <span class="number">20</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> ground = Bodies.rectangle(<span class="number">500</span>, <span class="number">600</span>, <span class="number">1000</span>, <span class="number">100</span>, &#123; <span class="attr">isStatic</span>:<span class="literal">true</span> &#125;)</span><br><span class="line">World.add(world, [stackRect, ground])</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure><h3 id="4、MouseConstraint（鼠标约束）"><a href="#4、MouseConstraint（鼠标约束）" class="headerlink" title="4、MouseConstraint（鼠标约束）"></a>4、MouseConstraint（鼠标约束）</h3><p>如果你想让刚体与用户之间有交互，那就要在鼠标和刚体之间建立连接，也就是鼠标和刚体间的约束，<code>Matter.MouseConstraint</code> 模块包含用于创建鼠标约束的方法，提供通过鼠标或触摸（移动端时）移动刚体的能力，可以设置什么标记的物体才能被鼠标操纵，创建鼠标约束后，可以捕获到鼠标的各类事件。</p><h3 id="5、Vector（向量）"><a href="#5、Vector（向量）" class="headerlink" title="5、Vector（向量）"></a>5、Vector（向量）</h3><p><code>Matter.Vector</code> 模块包含用于创建和操纵向量的方法，向量是引擎有关几何操作行为的基础，修改物体的运动状态基本都是使用向量来控制，例如赋予物体一个力，或者设置物体的速度、旋转角度，并且内置了多个向量的求解函数：向量积、标量积、格式化、垂直向量等等。</p><h3 id="6、Events（事件）"><a href="#6、Events（事件）" class="headerlink" title="6、Events（事件）"></a>6、Events（事件）</h3><p><code>Matter.Events</code> 模块包含了绑定、移除和触发对象的方法。<br><code>绑定事件 Matter.Events.on(object, eventNames, callback)</code><br><code>移除事件 Matter.Events.off(object, eventNames, callback)</code><br><code>触发事件 Matter.Events.trigger(object, eventNames, event)</code></p><h3 id="7、施加力"><a href="#7、施加力" class="headerlink" title="7、施加力"></a>7、施加力</h3><p><code>Matter.Body.applyForce(body, position, force)</code>方法可以给刚体施加一个力，<br>传入 X 和 Y 轴需要的力度值，通过这个方法你可以去模拟踢一个足球、投一个篮球的效果。</p><h3 id="8、重力"><a href="#8、重力" class="headerlink" title="8、重力"></a>8、重力</h3><p>可以设置 X、Y 轴的重力值，默认都为 1，参数在 0、1、-1 中选择使用。<br>// 实现反重力效果<br>engine.world.gravity.y = -1;<br>// 无重力效果<br>engine.world.gravity.y = 0;</p><h3 id="9、睡眠状态"><a href="#9、睡眠状态" class="headerlink" title="9、睡眠状态"></a>9、睡眠状态</h3><p>通过 enableSleeping: true 开启睡眠模式后，当刚体处于不受作用状态时，会进入睡眠状态，这样可以有效的提高引擎的性能，当物体被其他物体碰撞或者对刚体施加力时，刚体会被叫醒，引擎会继续对其进行计算模拟。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开启睡眠状态</span></span><br><span class="line"><span class="keyword">var</span> engine = Engine.create(&#123;</span><br><span class="line">    enableSleeping: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 还可以针对进入睡眠状态的刚体进行监听，比如将刚体移出世界</span></span><br><span class="line">Event.on(ball, <span class="string">"sleepStart"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    World.remove(engine.world, ball);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="10、摩擦力"><a href="#10、摩擦力" class="headerlink" title="10、摩擦力"></a>10、摩擦力</h3><p>摩擦力在 Matter.js 中分别提供了三种：摩擦力 friction、空气摩擦力 frictionAir 以及静止摩擦力 frictionStatic。friction 默认值是 0.1，取值范围在 0 - 1，当值为 0 意味着刚体可以摩擦力的无限滑动，1 意味着对刚体施加力后会立刻停止，frictionAir 默认值是 0.01，取值范围 0 - 1，当值为 0 意味着刚体在空间中移动时速度永远不会减慢，值越高时刚体在空间的移动速度越慢，frictionStatic 默认值 0.5，当值为 0 时意味着刚体几乎是静止的，值越高时意味着需要移动刚体所需的力就越大。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 摩擦力</span></span><br><span class="line">Bodies.rectangle(<span class="number">300</span>, <span class="number">70</span>, <span class="number">40</span>, <span class="number">40</span>, &#123;</span><br><span class="line">    friction: <span class="number">0.01</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 空气摩擦力</span></span><br><span class="line">Bodies.rectangle(<span class="number">300</span>, <span class="number">70</span>, <span class="number">40</span>, <span class="number">40</span>, &#123;</span><br><span class="line">    frictionAir: <span class="number">0.05</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 静止摩擦力</span></span><br><span class="line">Bodies.rectangle(<span class="number">300</span>, <span class="number">70</span>, <span class="number">40</span>, <span class="number">40</span>, &#123;</span><br><span class="line">    frictionStatic: <span class="number">1</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="11、时间缩放"><a href="#11、时间缩放" class="headerlink" title="11、时间缩放"></a>11、时间缩放</h3><p>可以控制全局的时间，当值为 0 时为冻结模拟，值为 0.1 给出慢动作效果，值为 1.2 时给出加速效果。<br><code>engine.timing.timeScale = 0.1;</code></p><h3 id="12、Matter-js-调试"><a href="#12、Matter-js-调试" class="headerlink" title="12、Matter.js 调试"></a>12、Matter.js 调试</h3><p>除了前面讲 Matter.Render 模块的时候提到的线框模式 wireframes 便于调试外，Matter.Render 模块其实还为我们提供了以下几种方法，便于我们自定义调试选项：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> render = Render.create(&#123;</span><br><span class="line">    element: <span class="built_in">document</span>.body,</span><br><span class="line">    engine: engine,</span><br><span class="line">    options: &#123;</span><br><span class="line">        width: <span class="number">800</span>,</span><br><span class="line">        height: <span class="number">600</span>,</span><br><span class="line">        pixelRatio: <span class="number">1</span>, <span class="comment">// 设置像素比</span></span><br><span class="line">        background: <span class="string">'#fafafa'</span>, <span class="comment">// 全局渲染模式时背景色</span></span><br><span class="line">        wireframeBackground: <span class="string">'#222'</span>, <span class="comment">// 线框模式时背景色</span></span><br><span class="line">        hasBounds: <span class="literal">false</span>,</span><br><span class="line">        enabled: <span class="literal">true</span>,</span><br><span class="line">        wireframes: <span class="literal">true</span>, <span class="comment">// 线框模式</span></span><br><span class="line">        showSleeping: <span class="literal">true</span>, <span class="comment">// 刚体睡眠状态</span></span><br><span class="line">        showDebug: <span class="literal">false</span>, <span class="comment">// Debug 信息</span></span><br><span class="line">        showBroadphase: <span class="literal">false</span>, <span class="comment">// 粗测阶段</span></span><br><span class="line">        showBounds: <span class="literal">false</span>, <span class="comment">// 刚体的界限</span></span><br><span class="line">        showVelocity: <span class="literal">false</span>, <span class="comment">// 移动刚体时速度</span></span><br><span class="line">        showCollisions: <span class="literal">false</span>, <span class="comment">// 刚体碰撞点</span></span><br><span class="line">        showSeparations: <span class="literal">false</span>, <span class="comment">// 刚体分离</span></span><br><span class="line">        showAxes: <span class="literal">false</span>, <span class="comment">// 刚体轴线</span></span><br><span class="line">        showPositions: <span class="literal">false</span>, <span class="comment">// 刚体位置</span></span><br><span class="line">        showAngleIndicator: <span class="literal">false</span>, <span class="comment">// 刚体转角指示</span></span><br><span class="line">        showIds: <span class="literal">false</span>, <span class="comment">// 显示每个刚体的 ID</span></span><br><span class="line">        showVertexNumbers: <span class="literal">false</span>, <span class="comment">// 刚体顶点数</span></span><br><span class="line">        showConvexHulls: <span class="literal">false</span>, <span class="comment">// 刚体凸包点</span></span><br><span class="line">        showInternalEdges: <span class="literal">false</span>, <span class="comment">// 刚体内部边界</span></span><br><span class="line">        showMousePosition: <span class="literal">false</span> <span class="comment">// 鼠标约束线</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="13、参考Matter-js设置碰撞规则"><a href="#13、参考Matter-js设置碰撞规则" class="headerlink" title="13、参考Matter.js设置碰撞规则"></a>13、参考Matter.js设置碰撞规则</h3><p>Matter相互碰撞提供了collisionFilter属性，支持三种属性，分别是 <code>group</code> <code>category</code> <code>mask</code></p><p>使用三种属性，就能设计出很复杂的碰撞关系。其中规则如下：</p><p>第一种情况，在两个group相等的前提下，如果任意group大于零，则两者始终碰撞，比如大家都是1，这大家相互直接始终碰撞；如果任意group小于0，比如大家都是-1，则大家永远也不碰撞。除上述两种情况，则根据category和mask进行判定<br>第二张情况，在两个group不相等的前提下，根据category和mask进行判定，category，mask判定规则：<br>category代表一个碰撞分类，其值可为1，2，4，8…直到 2^31，每个刚体设置一个值<br>mask为碰撞集合（category集合），是category相与的结果值，比如接受2，4类型，其值为6<br>a和b碰撞情况是：a的mask必须包含b的category，同时b的mask也必须包含a的category，即<br>(a.category &amp; b.mask) !== 0 &amp;&amp; (b.category &amp; a.mask) !== 0</p><p>1、group 属性为数字类型。在两个物体的group属性值相同的前提下，如果这个数字为负数，则这两个物体不会碰撞，如果这个数字为正数，则这两个物体会碰撞。<br>如果两个物体的group属性不相同，或者有一个为0（或两个都为0），则需要根据其他两个属性来判断碰撞规则。<br>2、category属性为16进制数字，默认为0x0001，其值只能为2的幂级数，如0x0002,0x0004,0x0008，（比如，0x0007是不合法的，不会触发碰撞规则）<br>3、mask属性设置可以与该物体碰撞的category。</p><p>eg：<br>A物体的category为0x0002，B物体的category为0x0004<br>C物体若要与A物体碰撞，其mask应为A的category，即0x0002<br>C物体若要与B物体碰撞，其mask应为B的category，即0x0004<br>C物体若要与A物体、B物体同时碰撞，其mask应同时包含为A和B的category，即 0x0002 | 0x0004</p><p><code>category必须与mask配合使用才有效，因为mask的默认值包含了所有的category，默认可以与所有物体发生碰撞。</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Matter.js 是一个用于 Web 的 JavaScript 2D 物理引擎库&lt;/p&gt;
&lt;h2 id=&quot;Matter-js-支持的特性&quot;&gt;&lt;a href=&quot;#Matter-js-支持的特性&quot; class=&quot;headerlink&quot; title=&quot;Matter.js 支持的
      
    
    </summary>
    
      <category term="H5游戏" scheme="http://yoursite.com/categories/H5%E6%B8%B8%E6%88%8F/"/>
    
    
      <category term="MattarJS" scheme="http://yoursite.com/tags/MattarJS/"/>
    
  </entry>
  
  <entry>
    <title>Threejs 基础知识</title>
    <link href="http://yoursite.com/2019/02/27/%5BThreejs%5DThreejs%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2019/02/27/[Threejs]Threejs基础知识/</id>
    <published>2019-02-27T08:50:29.000Z</published>
    <updated>2019-03-27T06:55:14.271Z</updated>
    
    <content type="html"><![CDATA[<h2 id="最小绘图环境"><a href="#最小绘图环境" class="headerlink" title="最小绘图环境"></a>最小绘图环境</h2><p>包含了三个要素：<br>1、<code>场景 scene</code> – 包含所有需要显示的3D物体以及其他相关元素的容器<br>2、<code>摄像机 camera</code> – 决定3D场景如何投影到2D画布之上<br>3、<code>渲染器 renderer</code> – 用于最后绘制的画笔<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Scene, PerspectiveCamera, WebGLRenderer &#125; <span class="keyword">from</span> <span class="string">'three'</span>;</span><br><span class="line"><span class="keyword">var</span> scene = <span class="keyword">new</span> Scene(); <span class="comment">// 创建场景</span></span><br><span class="line"><span class="keyword">var</span> camera = <span class="keyword">new</span> PerspectiveCamera(<span class="number">45</span>, <span class="built_in">window</span>.innerWidth / <span class="built_in">window</span>.innerHeight, <span class="number">1</span>, <span class="number">1000</span>); <span class="comment">// 创建摄影机</span></span><br><span class="line">camera.position.z = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> renderer = <span class="keyword">new</span> WebGLRenderer(); <span class="comment">// 创建渲染器</span></span><br><span class="line">renderer.setSize(<span class="built_in">window</span>.innerWidth, <span class="built_in">window</span>.innerHeight); <span class="comment">// 设置画布大小</span></span><br><span class="line">renderer.setPixelRatio(<span class="built_in">window</span>.devicePixelRatio); <span class="comment">// 设置像素比，针对高清屏</span></span><br><span class="line">renderer.setClearColor(<span class="number">0x000000</span>, <span class="number">1</span>); <span class="comment">// 设置默认背景色</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(renderer.domElement); <span class="comment">// 把画笔插入到dom中</span></span><br></pre></td></tr></table></figure></p><h4 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h4><p>1、照相机：投影方式为：正交投影、透视投影<br>  正交投影：正交投影照相机获得的结果对于在三维空间内平行的线，投影到二维空间中也一定是平行的<br>  透视投影：透视投影照相机获得的结果是类似人眼在真实世界中看到的有“近大远小”的效果<br>2、<code>PerspectiveCamera 透视投影照相机</code>(视野角度FOV, 长宽比aspect ratio, 远剪切面, 近剪切面)<br>3、渲染器：将渲染器宽高设置为浏览器窗口宽高，对于性能比较敏感的应用程序，可以给setSize传入一个较小的值。<br>  优化：若希望保持应用程序的尺寸，但是以较低的分辨率来渲染，可以在调用setSize时，给updateStyle（第三个参数）传入false。eg: setSize(window.innerWidth/2, window.innerHeight/2, false)</p><p>4、场景——雾<br>  <code>Fog 线性雾，雾的密度是随着距离线性增大的。</code>(color, near, far)<br>  <code>FogExp2 指数雾，雾的密度是随着距离指数增大的</code>(color, density默认值0.00025)<br>5、</p><h2 id="形状"><a href="#形状" class="headerlink" title="形状"></a>形状</h2><p><code>BoxGeometry</code> – 长方体<br><code>CircleGeometry</code> – 圆形平面<br><code>CylinderGeometry</code> – 圆柱体<br><code>PlaneGeometry</code> – 方形平面<br><code>RingGeometry</code> – 环形平面<br><code>SphereGeometry</code> – 球形<br><code>TextGeometry</code> – 文字<br><code>TorusGeometry</code> – 圆环<br><code>TubeGeometry</code> – 圆管</p><h2 id="材质"><a href="#材质" class="headerlink" title="材质"></a>材质</h2><p><code>MeshBasicMaterial</code>: 忽略光线的作用<br><code>MeshLambertMaterial</code> – 漫反射材质，用来模拟真实环境下的物体，例如木材，石料等物质的反光情况<br><code>MeshPhongMaterial</code> – 镜面反射材质，用来模拟镜子，金属等拥有高光的物体就比较合适<br><code>MeshDepthMaterial</code> – 根据物体上每一点到摄像机的远近来显示颜色，远的显示黑色，近的显示白色<br><code>MeshNormalMaterial</code> – 根据物体上每一面的法向量方向来显示颜色</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Mesh, MeshBasicMaterial, BoxGeometry &#125; <span class="keyword">from</span> <span class="string">'three'</span>;</span><br><span class="line"><span class="keyword">var</span> geometry = <span class="keyword">new</span> BoxGeometry(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>); <span class="comment">// 创建一个长方体，用来定义物体的形状</span></span><br><span class="line"><span class="keyword">var</span> material = <span class="keyword">new</span> MeshBasicMaterial(&#123; <span class="attr">color</span>: <span class="number">0xff0000</span> &#125;); <span class="comment">// 创建一个材质，用来定义物体的颜色</span></span><br><span class="line"><span class="keyword">var</span> mesh = <span class="keyword">new</span> Mesh(geometry, material); <span class="comment">// 使用形状和素材，来定义物体</span></span><br><span class="line">scene.add(mesh);</span><br><span class="line">renderer.render(scene, camera);</span><br></pre></td></tr></table></figure><h2 id="纹理贴图"><a href="#纹理贴图" class="headerlink" title="纹理贴图"></a>纹理贴图</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 TextureLoader 来加载一个gif图作为纹理，并且把这个纹理通过map属性映射到了材质上，加上材质后，整个物体就更加真实了</span></span><br><span class="line"><span class="keyword">import</span> &#123; TextureLoader, MeshLambertMaterial &#125; <span class="keyword">from</span> <span class="string">'three'</span>;</span><br><span class="line"><span class="keyword">var</span> texture = <span class="keyword">new</span> TextureLoader().load(‘./assets/texture/crate.gif’)</span><br><span class="line"><span class="keyword">var</span> material = <span class="keyword">new</span> MeshLambertMaterial(&#123; <span class="attr">map</span>: texture &#125;)</span><br></pre></td></tr></table></figure><h2 id="3D动画"><a href="#3D动画" class="headerlink" title="3D动画"></a>3D动画</h2><p><strong>原理：定时连拍渲染器</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  requestAnimationFrame(render);</span><br><span class="line">  update();</span><br><span class="line">  renderer.render(scene, camera);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// update your view</span></span><br><span class="line">  <span class="comment">// 让box旋转</span></span><br><span class="line">  box.rotation.x += <span class="number">0.005</span>;</span><br><span class="line">  box.rotation.y += <span class="number">0.01</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="灯光"><a href="#灯光" class="headerlink" title="灯光"></a>灯光</h2><p>1、<code>AmbientLight</code>：环境光会均匀的照亮场景中的所有物体。环境光不能用来投射阴影，因为它没有方向。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;最小绘图环境&quot;&gt;&lt;a href=&quot;#最小绘图环境&quot; class=&quot;headerlink&quot; title=&quot;最小绘图环境&quot;&gt;&lt;/a&gt;最小绘图环境&lt;/h2&gt;&lt;p&gt;包含了三个要素：&lt;br&gt;1、&lt;code&gt;场景 scene&lt;/code&gt; – 包含所有需要显示的3D物体以及其
      
    
    </summary>
    
      <category term="H5游戏" scheme="http://yoursite.com/categories/H5%E6%B8%B8%E6%88%8F/"/>
    
    
      <category term="ThreeJs" scheme="http://yoursite.com/tags/ThreeJs/"/>
    
  </entry>
  
  <entry>
    <title>Fabricjs API 整理</title>
    <link href="http://yoursite.com/2019/02/24/%5BFabricjs%5DFabricjs%20API%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2019/02/24/[Fabricjs]Fabricjs API整理/</id>
    <published>2019-02-24T07:22:02.000Z</published>
    <updated>2019-03-27T06:55:21.219Z</updated>
    
    <content type="html"><![CDATA[<h2 id="锁住"><a href="#锁住" class="headerlink" title="锁住"></a>锁住</h2><p><code>lockMovementX</code>   <code>lockMovementY</code>      <code>lockRotation</code><br><code>lockScalingX</code>    <code>lockScalingY</code></p><h2 id="选中元素时去掉连接线"><a href="#选中元素时去掉连接线" class="headerlink" title="选中元素时去掉连接线"></a>选中元素时去掉连接线</h2><p><code>object.hasBorders = false;</code></p><h2 id="选中元素时去掉四边的框"><a href="#选中元素时去掉四边的框" class="headerlink" title="选中元素时去掉四边的框"></a>选中元素时去掉四边的框</h2><p><code>object.hasControls=false;</code></p><h2 id="设置选中元素时的样子"><a href="#设置选中元素时的样子" class="headerlink" title="设置选中元素时的样子"></a>设置选中元素时的样子</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">object.set(&#123;</span><br><span class="line">  borderColor: <span class="string">'red'</span>,</span><br><span class="line">  cornerColor: <span class="string">'green'</span>,</span><br><span class="line">  cornerSize: <span class="number">6</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="设置元素不能被操作"><a href="#设置元素不能被操作" class="headerlink" title="设置元素不能被操作"></a>设置元素不能被操作</h2><p><code>Object.selectable=false;</code></p><h2 id="设置背景图"><a href="#设置背景图" class="headerlink" title="设置背景图"></a>设置背景图</h2><p><code>canvas.setBackgroundImage(&#39;img/golfball.png&#39;,canvas.renderAll.bind(canvas));</code></p><h2 id="设置背景透明显示"><a href="#设置背景透明显示" class="headerlink" title="设置背景透明显示"></a>设置背景透明显示</h2><p><code>canvas.setOverlayImage(&#39;../assets/jail_cell_bars.png&#39;, canvas.renderAll.bind(canvas));</code></p><h2 id="事件："><a href="#事件：" class="headerlink" title="事件："></a>事件：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mouse:up mouse:move mouse:dowm</span><br><span class="line">object:modified object:moving  object:selected object:scalig object:rotating </span><br><span class="line">before:selection:cleared  selection:cleared</span><br><span class="line">after：render</span><br><span class="line"><span class="string">"path:created"</span>  <span class="string">"object:added"</span> <span class="string">"object:removed"</span></span><br></pre></td></tr></table></figure><h2 id="添加线"><a href="#添加线" class="headerlink" title="添加线"></a>添加线</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> line = <span class="keyword">new</span> fabric.Line([<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>], &#123;</span><br><span class="line">  fill: <span class="string">'green'</span>,</span><br><span class="line">  stroke: <span class="string">'green'</span></span><br><span class="line">&#125;);</span><br><span class="line">canvas.add(line);</span><br></pre></td></tr></table></figure><h2 id="添加矩形"><a href="#添加矩形" class="headerlink" title="添加矩形"></a>添加矩形</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="keyword">new</span> fabric.Canvas(<span class="string">'c'</span>);</span><br><span class="line"><span class="keyword">var</span> rect = <span class="keyword">new</span> fabric.Rect(&#123;</span><br><span class="line">  left: <span class="number">100</span>,</span><br><span class="line">  top: <span class="number">100</span>,</span><br><span class="line">  fill: <span class="string">'red'</span>,</span><br><span class="line">  width: <span class="number">20</span>,</span><br><span class="line">  height: <span class="number">20</span></span><br><span class="line">&#125;);</span><br><span class="line">canvas.add(rect);</span><br></pre></td></tr></table></figure><h2 id="移动到指定位置"><a href="#移动到指定位置" class="headerlink" title="移动到指定位置"></a>移动到指定位置</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rect.set(&#123; <span class="attr">left</span>: <span class="number">20</span>, <span class="attr">top</span>: <span class="number">50</span> &#125;);</span><br><span class="line">canvas.renderAll();</span><br></pre></td></tr></table></figure><h2 id="设置一些属性"><a href="#设置一些属性" class="headerlink" title="设置一些属性"></a>设置一些属性</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rect.set(<span class="string">'fill'</span>, <span class="string">'red'</span>);</span><br><span class="line">rect.set(&#123; <span class="attr">strokeWidth</span>: <span class="number">5</span>, <span class="attr">stroke</span>: <span class="string">'rgba(100,200,200,0.5)'</span> &#125;);</span><br><span class="line">rect.set(<span class="string">'angle'</span>, <span class="number">15</span>).set(<span class="string">'flipY'</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h2 id="添加圆和三角形"><a href="#添加圆和三角形" class="headerlink" title="添加圆和三角形"></a>添加圆和三角形</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> circle = <span class="keyword">new</span> fabric.Circle(&#123;</span><br><span class="line">  radius: <span class="number">20</span>, <span class="attr">fill</span>: <span class="string">'green'</span>, <span class="attr">left</span>: <span class="number">100</span>, <span class="attr">top</span>: <span class="number">100</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> triangle = <span class="keyword">new</span> fabric.Triangle(&#123;</span><br><span class="line">  width: <span class="number">20</span>, <span class="attr">height</span>: <span class="number">30</span>, <span class="attr">fill</span>: <span class="string">'blue'</span>, <span class="attr">left</span>: <span class="number">50</span>, <span class="attr">top</span>: <span class="number">50</span></span><br><span class="line">&#125;);</span><br><span class="line">canvas.add(circle, triangle);</span><br></pre></td></tr></table></figure><h2 id="椭圆"><a href="#椭圆" class="headerlink" title="椭圆"></a>椭圆</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ellipse = <span class="keyword">new</span> fabric.Ellipse(&#123;</span><br><span class="line">  rx: <span class="number">45</span>,</span><br><span class="line">  ry: <span class="number">80</span>,</span><br><span class="line">  fill: <span class="string">'yellow'</span>,</span><br><span class="line">  stroke: <span class="string">'red'</span>,</span><br><span class="line">  strokeWidth: <span class="number">3</span>,</span><br><span class="line">  angle: <span class="number">30</span>,</span><br><span class="line">  left: <span class="number">100</span>,</span><br><span class="line">  top: <span class="number">100</span></span><br><span class="line">&#125;);</span><br><span class="line">canvas.add(ellipse);</span><br></pre></td></tr></table></figure><h2 id="Canvas中操作一些元素的方法"><a href="#Canvas中操作一些元素的方法" class="headerlink" title="Canvas中操作一些元素的方法"></a>Canvas中操作一些元素的方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="keyword">new</span> fabric.Canvas(<span class="string">'c'</span>);</span><br><span class="line"><span class="keyword">var</span> rect = <span class="keyword">new</span> fabric.Rect();</span><br><span class="line">canvas.add(rect); <span class="comment">// add object</span></span><br><span class="line"></span><br><span class="line">canvas.item(<span class="number">0</span>); <span class="comment">// reference fabric.Rect added earlier (first object)</span></span><br><span class="line">canvas.getObjects(); <span class="comment">// get all objects on canvas (rect will be first and only)</span></span><br><span class="line">canvas.remove(rect); <span class="comment">// remove previously-added fabric.Rect</span></span><br></pre></td></tr></table></figure><h2 id="加载图片的方法"><a href="#加载图片的方法" class="headerlink" title="加载图片的方法"></a>加载图片的方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="keyword">new</span> fabric.Canvas(<span class="string">'c'</span>);</span><br><span class="line"><span class="keyword">var</span> imgElement = <span class="built_in">document</span>.getElementById(<span class="string">'my-image'</span>);</span><br><span class="line"><span class="keyword">var</span> imgInstance = <span class="keyword">new</span> fabric.Image(imgElement, &#123;</span><br><span class="line">  left: <span class="number">100</span>,</span><br><span class="line">  top: <span class="number">100</span>,</span><br><span class="line">  angle: <span class="number">30</span>,</span><br><span class="line">  opacity: <span class="number">0.85</span></span><br><span class="line">&#125;);</span><br><span class="line">canvas.add(imgInstance);</span><br><span class="line"></span><br><span class="line">fabric.Image.fromURL(<span class="string">'my_image.png'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">oImg</span>) </span>&#123;</span><br><span class="line">  canvas.add(oImg);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fabric.Image.fromURL(<span class="string">'my_image.png'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">oImg</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// scale image down, and flip it, before adding it onto canvas</span></span><br><span class="line">  oImg.scale(<span class="number">0.5</span>).setFlipX(<span class="literal">true</span>);</span><br><span class="line">  canvas.add(oImg);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="通过画路径为形状"><a href="#通过画路径为形状" class="headerlink" title="通过画路径为形状"></a>通过画路径为形状</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="keyword">new</span> fabric.Canvas(<span class="string">'c'</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * M - 移动</span></span><br><span class="line"><span class="comment"> * L - 线</span></span><br><span class="line"><span class="comment"> * z - 让图形闭合路径</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">var</span> path = <span class="keyword">new</span> fabric.Path(<span class="string">'M 0 0 L 200 100 L 170 200 z'</span>);</span><br><span class="line">path.set(&#123; <span class="attr">left</span>: <span class="number">120</span>, <span class="attr">top</span>: <span class="number">120</span> &#125;);</span><br><span class="line">canvas.add(path);</span><br></pre></td></tr></table></figure><h2 id="可以设置路径样式"><a href="#可以设置路径样式" class="headerlink" title="可以设置路径样式"></a>可以设置路径样式</h2><p><code>path.set({ fill: &#39;red&#39;, stroke: &#39;green&#39;, opacity: 0.5 });</code></p><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">rect.animate(<span class="string">'angle'</span>, <span class="number">45</span>, &#123;</span><br><span class="line">  onChange: canvas.renderAll.bind(canvas)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line">rect.animate(<span class="string">'left'</span>, <span class="string">'+=100'</span>, &#123; <span class="attr">onChange</span>: canvas.renderAll.bind(canvas) &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line">rect.animate(<span class="string">'angle'</span>, <span class="string">'-=5'</span>, &#123; <span class="attr">onChange</span>: canvas.renderAll.bind(canvas) &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line">rect.animate(<span class="string">'left'</span>, <span class="number">500</span>, &#123;</span><br><span class="line">  onChange: canvas.renderAll.bind(canvas),</span><br><span class="line">  duration: <span class="number">1000</span>,</span><br><span class="line">  easing: fabric.util.ease.easeOutBounce</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="组合的使用"><a href="#组合的使用" class="headerlink" title="组合的使用"></a>组合的使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> circle = <span class="keyword">new</span> fabric.Circle(&#123;</span><br><span class="line">  radius: <span class="number">100</span>,</span><br><span class="line">  fill: <span class="string">'#eef'</span>,</span><br><span class="line">  scaleY: <span class="number">0.5</span>,</span><br><span class="line">  originX: <span class="string">'center'</span>,</span><br><span class="line">  originY: <span class="string">'center'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> text = <span class="keyword">new</span> fabric.Text(<span class="string">'hello world'</span>, &#123;</span><br><span class="line">  fontSize: <span class="number">30</span>,</span><br><span class="line">  originX: <span class="string">'center'</span>,</span><br><span class="line">  originY: <span class="string">'center'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> group = <span class="keyword">new</span> fabric.Group([ circle, text ], &#123;</span><br><span class="line">  left: <span class="number">150</span>,</span><br><span class="line">  top: <span class="number">100</span>,</span><br><span class="line">  angle: <span class="number">-10</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">canvas.add(group);</span><br></pre></td></tr></table></figure><h2 id="设置组合中的元素"><a href="#设置组合中的元素" class="headerlink" title="设置组合中的元素"></a>设置组合中的元素</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">group.item(<span class="number">0</span>).setFill(<span class="string">'red'</span>);</span><br><span class="line">group.item(<span class="number">1</span>).set(&#123;</span><br><span class="line">  text: <span class="string">'trololo'</span>,</span><br><span class="line">  fill: <span class="string">'white'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="keyword">new</span> fabric.Canvas(<span class="string">'c'</span>);</span><br><span class="line"><span class="built_in">JSON</span>.stringify(canvas);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line">canvas.toDatalessJSON()</span><br></pre></td></tr></table></figure><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><p><code>canvas.loadFromJSON（JSON.stringify(canvas)）</code></p><h2 id="透时图片随mouse移动显示"><a href="#透时图片随mouse移动显示" class="headerlink" title="透时图片随mouse移动显示"></a>透时图片随mouse移动显示</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="keyword">this</span>.__canvas = <span class="keyword">new</span> fabric.Canvas(<span class="string">'c'</span>);</span><br><span class="line">  fabric.Object.prototype.transparentCorners = <span class="literal">false</span>;</span><br><span class="line">  fabric.Object.prototype.originX = fabric.Object.prototype.originY = <span class="string">'center'</span>;</span><br><span class="line"></span><br><span class="line">  fabric.loadSVGFromURL(<span class="string">'../assets/135.svg'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">objects</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = objects[<span class="number">0</span>].scale(<span class="number">0.25</span>);</span><br><span class="line">    canvas.centerObject(obj);</span><br><span class="line">    canvas.add(obj);</span><br><span class="line"></span><br><span class="line">    obj.clone(<span class="function"><span class="keyword">function</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">      canvas.add(c.set(&#123; <span class="attr">left</span>: <span class="number">100</span>, <span class="attr">top</span>: <span class="number">100</span>, <span class="attr">angle</span>: <span class="number">-15</span> &#125;));</span><br><span class="line">    &#125;);</span><br><span class="line">    obj.clone(<span class="function"><span class="keyword">function</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">      canvas.add(c.set(&#123; <span class="attr">left</span>: <span class="number">480</span>, <span class="attr">top</span>: <span class="number">100</span>, <span class="attr">angle</span>: <span class="number">15</span> &#125;));</span><br><span class="line">    &#125;);</span><br><span class="line">    obj.clone(<span class="function"><span class="keyword">function</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">      canvas.add(c.set(&#123; <span class="attr">left</span>: <span class="number">100</span>, <span class="attr">top</span>: <span class="number">400</span>, <span class="attr">angle</span>: <span class="number">-15</span> &#125;));</span><br><span class="line">    &#125;);</span><br><span class="line">    obj.clone(<span class="function"><span class="keyword">function</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">      canvas.add(c.set(&#123; <span class="attr">left</span>: <span class="number">480</span>, <span class="attr">top</span>: <span class="number">400</span>, <span class="attr">angle</span>: <span class="number">15</span> &#125;));</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    canvas.on(<span class="string">'mouse:move'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> p = canvas.getPointer(options.e);</span><br><span class="line"></span><br><span class="line">      canvas.forEachObject(<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> distX = <span class="built_in">Math</span>.abs(p.x - obj.left),</span><br><span class="line">            distY = <span class="built_in">Math</span>.abs(p.y - obj.top),</span><br><span class="line">            dist = <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.sqrt(<span class="built_in">Math</span>.pow(distX, <span class="number">2</span>) + <span class="built_in">Math</span>.pow(distY, <span class="number">2</span>)));</span><br><span class="line"></span><br><span class="line">        obj.setOpacity(<span class="number">1</span> / (dist / <span class="number">20</span>));</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      canvas.renderAll();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="锁定旋转"><a href="#锁定旋转" class="headerlink" title="锁定旋转"></a>锁定旋转</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="keyword">new</span> fabric.Canvas(<span class="string">'c6'</span>);</span><br><span class="line">canvas.add(<span class="keyword">new</span> fabric.Rect(&#123; <span class="attr">width</span>: <span class="number">50</span>, <span class="attr">height</span>: <span class="number">50</span>, <span class="attr">fill</span>: <span class="string">'#77f'</span>, <span class="attr">top</span>: <span class="number">100</span>, <span class="attr">left</span>: <span class="number">100</span> &#125;));</span><br><span class="line">canvas.item(<span class="number">0</span>).lockRotation = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">this</span>.__canvases.push(canvas);</span><br></pre></td></tr></table></figure><h2 id="锁定大小缩放"><a href="#锁定大小缩放" class="headerlink" title="锁定大小缩放"></a>锁定大小缩放</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="keyword">new</span> fabric.Canvas(<span class="string">'c7'</span>);</span><br><span class="line">canvas.add(<span class="keyword">new</span> fabric.Rect(&#123; <span class="attr">width</span>: <span class="number">50</span>, <span class="attr">height</span>: <span class="number">50</span>, <span class="attr">fill</span>: <span class="string">'#77f'</span>, <span class="attr">top</span>: <span class="number">100</span>, <span class="attr">left</span>: <span class="number">100</span> &#125;));</span><br><span class="line">canvas.item(<span class="number">0</span>).lockScalingX = canvas.item(<span class="number">0</span>).lockScalingY = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">this</span>.__canvases.push(canvas);</span><br></pre></td></tr></table></figure><h2 id="锁定X轴移动"><a href="#锁定X轴移动" class="headerlink" title="锁定X轴移动"></a>锁定X轴移动</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="keyword">new</span> fabric.Canvas(<span class="string">'c8'</span>);</span><br><span class="line">canvas.add(<span class="keyword">new</span> fabric.Rect(&#123; <span class="attr">width</span>: <span class="number">50</span>, <span class="attr">height</span>: <span class="number">50</span>, <span class="attr">fill</span>: <span class="string">'#77f'</span>, <span class="attr">top</span>: <span class="number">100</span>, <span class="attr">left</span>: <span class="number">100</span> &#125;));</span><br><span class="line">canvas.item(<span class="number">0</span>).lockMovementX = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">this</span>.__canvases.push(canvas);</span><br></pre></td></tr></table></figure><h2 id="锁定Y轴移动"><a href="#锁定Y轴移动" class="headerlink" title="锁定Y轴移动"></a>锁定Y轴移动</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="keyword">new</span> fabric.Canvas(<span class="string">'c9'</span>);</span><br><span class="line">canvas.add(<span class="keyword">new</span> fabric.Rect(&#123; <span class="attr">width</span>: <span class="number">50</span>, <span class="attr">height</span>: <span class="number">50</span>, <span class="attr">fill</span>: <span class="string">'#77f'</span>, <span class="attr">top</span>: <span class="number">100</span>, <span class="attr">left</span>: <span class="number">100</span> &#125;));</span><br><span class="line">canvas.item(<span class="number">0</span>).lockMovementY = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">this</span>.__canvases.push(canvas);</span><br></pre></td></tr></table></figure><h2 id="设置背景图-1"><a href="#设置背景图-1" class="headerlink" title="设置背景图"></a>设置背景图</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="keyword">new</span> fabric.Canvas(<span class="string">'c17'</span>);</span><br><span class="line">canvas.add(<span class="keyword">new</span> fabric.Circle(&#123; <span class="attr">radius</span>: <span class="number">30</span>, <span class="attr">fill</span>: <span class="string">'#f55'</span>, <span class="attr">top</span>: <span class="number">100</span>, <span class="attr">left</span>: <span class="number">100</span> &#125;));</span><br><span class="line">canvas.setBackgroundImage(<span class="string">'../assets/pug.jpg'</span>, canvas.renderAll.bind(canvas));</span><br><span class="line"><span class="keyword">this</span>.__canvases.push(canvas);</span><br></pre></td></tr></table></figure><h2 id="设置背景图前显"><a href="#设置背景图前显" class="headerlink" title="设置背景图前显"></a>设置背景图前显</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="keyword">new</span> fabric.Canvas(<span class="string">'c13'</span>);</span><br><span class="line">canvas.add(<span class="keyword">new</span> fabric.Circle(&#123; <span class="attr">radius</span>: <span class="number">30</span>, <span class="attr">fill</span>: <span class="string">'#f55'</span>, <span class="attr">top</span>: <span class="number">100</span>, <span class="attr">left</span>: <span class="number">100</span> &#125;));</span><br><span class="line">canvas.setOverlayImage(<span class="string">'../assets/jail_cell_bars.png'</span>, canvas.renderAll.bind(canvas));</span><br><span class="line"><span class="keyword">this</span>.__canvases.push(canvas);</span><br></pre></td></tr></table></figure><h2 id="设置背景色"><a href="#设置背景色" class="headerlink" title="设置背景色"></a>设置背景色</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="keyword">new</span> fabric.Canvas(<span class="string">'c5'</span>);</span><br><span class="line">canvas.add(<span class="keyword">new</span> fabric.Circle(&#123; <span class="attr">radius</span>: <span class="number">30</span>, <span class="attr">fill</span>: <span class="string">'#f55'</span>, <span class="attr">top</span>: <span class="number">100</span>, <span class="attr">left</span>: <span class="number">100</span> &#125;));</span><br><span class="line">canvas.backgroundColor = <span class="string">'rgba(0,0,255,0.3)'</span>;</span><br><span class="line">canvas.renderAll();</span><br><span class="line"><span class="keyword">this</span>.__canvases.push(canvas);</span><br></pre></td></tr></table></figure><h2 id="锁定某个元素不能操作"><a href="#锁定某个元素不能操作" class="headerlink" title="锁定某个元素不能操作"></a>锁定某个元素不能操作</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="keyword">new</span> fabric.Canvas(<span class="string">'c4'</span>);</span><br><span class="line">canvas.add(<span class="keyword">new</span> fabric.Circle(&#123; <span class="attr">radius</span>: <span class="number">30</span>, <span class="attr">fill</span>: <span class="string">'#f55'</span>, <span class="attr">top</span>: <span class="number">100</span>, <span class="attr">left</span>: <span class="number">100</span> &#125;));</span><br><span class="line">canvas.add(<span class="keyword">new</span> fabric.Rect(&#123; <span class="attr">left</span>: <span class="number">50</span>, <span class="attr">top</span>: <span class="number">50</span>, <span class="attr">fill</span>: <span class="string">'green'</span>, <span class="attr">width</span>: <span class="number">30</span>, <span class="attr">height</span>: <span class="number">30</span> &#125;));</span><br><span class="line">canvas.add(<span class="keyword">new</span> fabric.Rect(&#123; <span class="attr">left</span>: <span class="number">150</span>, <span class="attr">top</span>: <span class="number">50</span>, <span class="attr">fill</span>: <span class="string">'green'</span>, <span class="attr">width</span>: <span class="number">30</span>, <span class="attr">height</span>: <span class="number">30</span> &#125;));</span><br><span class="line">canvas.add(<span class="keyword">new</span> fabric.Rect(&#123; <span class="attr">left</span>: <span class="number">150</span>, <span class="attr">top</span>: <span class="number">150</span>, <span class="attr">fill</span>: <span class="string">'green'</span>, <span class="attr">width</span>: <span class="number">30</span>, <span class="attr">height</span>: <span class="number">30</span> &#125;));</span><br><span class="line">canvas.add(<span class="keyword">new</span> fabric.Rect(&#123; <span class="attr">left</span>: <span class="number">50</span>, <span class="attr">top</span>: <span class="number">150</span>, <span class="attr">fill</span>: <span class="string">'green'</span>, <span class="attr">width</span>: <span class="number">30</span>, <span class="attr">height</span>: <span class="number">30</span> &#125;));</span><br><span class="line"></span><br><span class="line">canvas.item(<span class="number">0</span>).selectable = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">this</span>.__canvases.push(canvas);</span><br></pre></td></tr></table></figure><h2 id="Mouse选择时变成手形"><a href="#Mouse选择时变成手形" class="headerlink" title="Mouse选择时变成手形"></a>Mouse选择时变成手形</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="keyword">new</span> fabric.Canvas(<span class="string">'c11'</span>);</span><br><span class="line">canvas.add(<span class="keyword">new</span> fabric.Circle(&#123; <span class="attr">radius</span>: <span class="number">30</span>, <span class="attr">fill</span>: <span class="string">'#f55'</span>, <span class="attr">top</span>: <span class="number">100</span>, <span class="attr">left</span>: <span class="number">100</span> &#125;));</span><br><span class="line">canvas.hoverCursor = <span class="string">'pointer'</span>;</span><br><span class="line"><span class="keyword">this</span>.__canvases.push(canvas);</span><br></pre></td></tr></table></figure><h2 id="Mouse选中时没有任何效果"><a href="#Mouse选中时没有任何效果" class="headerlink" title="Mouse选中时没有任何效果"></a>Mouse选中时没有任何效果</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="keyword">new</span> fabric.Canvas(<span class="string">'c10'</span>);</span><br><span class="line">canvas.add(<span class="keyword">new</span> fabric.Circle(&#123; <span class="attr">radius</span>: <span class="number">30</span>, <span class="attr">fill</span>: <span class="string">'#f55'</span>, <span class="attr">top</span>: <span class="number">100</span>, <span class="attr">left</span>: <span class="number">100</span> &#125;));</span><br><span class="line">canvas.item(<span class="number">0</span>).hasControls = canvas.item(<span class="number">0</span>).hasBorders = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">canvas.on(&#123;</span><br><span class="line">  <span class="string">'mouse:down'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e.target) &#123;</span><br><span class="line">      e.target.opacity = <span class="number">0.5</span>;</span><br><span class="line">      canvas.renderAll();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'mouse:up'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e.target) &#123;</span><br><span class="line">      e.target.opacity = <span class="number">1</span>;</span><br><span class="line">      canvas.renderAll();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'object:moved'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.target.opacity = <span class="number">0.5</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'object:modified'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.target.opacity = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">this</span>.__canvases.push(canvas);</span><br></pre></td></tr></table></figure><h2 id="Mouse选择中时没四边操作位"><a href="#Mouse选择中时没四边操作位" class="headerlink" title="Mouse选择中时没四边操作位"></a>Mouse选择中时没四边操作位</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="keyword">new</span> fabric.Canvas(<span class="string">'c16'</span>);</span><br><span class="line">canvas.add(<span class="keyword">new</span> fabric.Circle(&#123; <span class="attr">radius</span>: <span class="number">30</span>, <span class="attr">fill</span>: <span class="string">'#f55'</span>, <span class="attr">top</span>: <span class="number">100</span>, <span class="attr">left</span>: <span class="number">100</span> &#125;));</span><br><span class="line">canvas.item(<span class="number">0</span>).hasControls = <span class="literal">false</span>;</span><br><span class="line">canvas.setActiveObject(canvas.item(<span class="number">0</span>));</span><br><span class="line"><span class="keyword">this</span>.__canvases.push(canvas);</span><br></pre></td></tr></table></figure><h2 id="Mouse选择中的一些样式"><a href="#Mouse选择中的一些样式" class="headerlink" title="Mouse选择中的一些样式"></a>Mouse选择中的一些样式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> canvas = <span class="keyword">new</span> fabric.Canvas(<span class="string">'c1'</span>);</span><br><span class="line">  canvas.add(<span class="keyword">new</span> fabric.Circle(&#123; <span class="attr">radius</span>: <span class="number">30</span>, <span class="attr">fill</span>: <span class="string">'#f55'</span>, <span class="attr">top</span>: <span class="number">100</span>, <span class="attr">left</span>: <span class="number">100</span> &#125;));</span><br><span class="line"></span><br><span class="line">  canvas.selectionColor = <span class="string">'rgba(0,255,0,0.3)'</span>;</span><br><span class="line">  canvas.selectionBorderColor = <span class="string">'red'</span>;</span><br><span class="line">  canvas.selectionLineWidth = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">this</span>.__canvases.push(canvas);</span><br><span class="line"></span><br><span class="line"><span class="comment">// -------------------------------------------------</span></span><br><span class="line"> <span class="keyword">var</span> canvas = <span class="keyword">new</span> fabric.Canvas(<span class="string">'c3'</span>);</span><br><span class="line">  canvas.add(<span class="keyword">new</span> fabric.Circle(&#123; <span class="attr">radius</span>: <span class="number">30</span>, <span class="attr">fill</span>: <span class="string">'#f55'</span>, <span class="attr">top</span>: <span class="number">100</span>, <span class="attr">left</span>: <span class="number">100</span> &#125;));</span><br><span class="line"></span><br><span class="line">  canvas.item(<span class="number">0</span>).set(&#123;</span><br><span class="line">    borderColor: <span class="string">'red'</span>,</span><br><span class="line">    cornerColor: <span class="string">'green'</span>,</span><br><span class="line">    cornerSize: <span class="number">6</span>,</span><br><span class="line">    transparentCorners: <span class="literal">false</span></span><br><span class="line">  &#125;);</span><br><span class="line">  canvas.setActiveObject(canvas.item(<span class="number">0</span>));</span><br><span class="line">  <span class="keyword">this</span>.__canvases.push(canvas);</span><br><span class="line"><span class="comment">// --------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> canvas = <span class="keyword">new</span> fabric.Canvas(<span class="string">'c19'</span>);</span><br><span class="line">  canvas.add(<span class="keyword">new</span> fabric.Circle(&#123; <span class="attr">radius</span>: <span class="number">30</span>, <span class="attr">fill</span>: <span class="string">'#f55'</span>, <span class="attr">top</span>: <span class="number">100</span>, <span class="attr">left</span>: <span class="number">100</span> &#125;));</span><br><span class="line"></span><br><span class="line">  canvas.item(<span class="number">0</span>).set(&#123;</span><br><span class="line">    borderColor: <span class="string">'gray'</span>,</span><br><span class="line">    cornerColor: <span class="string">'black'</span>,</span><br><span class="line">    cornerSize: <span class="number">12</span>,</span><br><span class="line">    transparentCorners: <span class="literal">true</span></span><br><span class="line">  &#125;);</span><br><span class="line">  canvas.setActiveObject(canvas.item(<span class="number">0</span>));</span><br><span class="line">  <span class="keyword">this</span>.__canvases.push(canvas);</span><br><span class="line"><span class="comment">// ---------------------------------------------------</span></span><br><span class="line"><span class="keyword">var</span> canvas = <span class="keyword">new</span> fabric.Canvas(<span class="string">'c15'</span>);</span><br><span class="line">  canvas.add(<span class="keyword">new</span> fabric.Circle(&#123; <span class="attr">radius</span>: <span class="number">30</span>, <span class="attr">fill</span>: <span class="string">'#f55'</span>, <span class="attr">top</span>: <span class="number">100</span>, <span class="attr">left</span>: <span class="number">100</span> &#125;));</span><br><span class="line">  canvas.item(<span class="number">0</span>).hasBorders = <span class="literal">false</span>;</span><br><span class="line">  canvas.setActiveObject(canvas.item(<span class="number">0</span>));</span><br><span class="line">  <span class="keyword">this</span>.__canvases.push(canvas);</span><br></pre></td></tr></table></figure><h2 id="璇转回复"><a href="#璇转回复" class="headerlink" title="璇转回复"></a>璇转回复</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  fabric.Object.prototype.transparentCorners = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="keyword">this</span>.__canvas = <span class="keyword">new</span> fabric.Canvas(<span class="string">'c'</span>, &#123;</span><br><span class="line">    backgroundColor: <span class="string">'#333'</span>,</span><br><span class="line">    HOVER_CURSOR: <span class="string">'pointer'</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> PolaroidPhoto = fabric.util.createClass(fabric.Object, fabric.Observable, &#123;</span><br><span class="line">    H_PADDING: <span class="number">20</span>,</span><br><span class="line">    V_PADDING: <span class="number">50</span>,</span><br><span class="line">    originX: <span class="string">'center'</span>,</span><br><span class="line">    originY: <span class="string">'center'</span>,</span><br><span class="line">    initialize: <span class="function"><span class="keyword">function</span>(<span class="params">src, options</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.callSuper(<span class="string">'initialize'</span>, options);</span><br><span class="line">      <span class="keyword">this</span>.image = <span class="keyword">new</span> Image();</span><br><span class="line">      <span class="keyword">this</span>.image.src = src;</span><br><span class="line">      <span class="keyword">this</span>.image.onload = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.width = <span class="keyword">this</span>.image.width;</span><br><span class="line">        <span class="keyword">this</span>.height = <span class="keyword">this</span>.image.height;</span><br><span class="line">        <span class="keyword">this</span>.loaded = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.setCoords();</span><br><span class="line">        <span class="keyword">this</span>.fire(<span class="string">'image:loaded'</span>);</span><br><span class="line">      &#125;).bind(<span class="keyword">this</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    _render: <span class="function"><span class="keyword">function</span>(<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.loaded) &#123;</span><br><span class="line">        ctx.fillStyle = <span class="string">'#fff'</span>;</span><br><span class="line">        ctx.fillRect(</span><br><span class="line">          -(<span class="keyword">this</span>.width / <span class="number">2</span>) - <span class="keyword">this</span>.H_PADDING,</span><br><span class="line">          -(<span class="keyword">this</span>.height / <span class="number">2</span>) - <span class="keyword">this</span>.H_PADDING,</span><br><span class="line">          <span class="keyword">this</span>.width + <span class="keyword">this</span>.H_PADDING * <span class="number">2</span>,</span><br><span class="line">          <span class="keyword">this</span>.height + <span class="keyword">this</span>.V_PADDING * <span class="number">2</span>);</span><br><span class="line">        ctx.drawImage(<span class="keyword">this</span>.image, -<span class="keyword">this</span>.width / <span class="number">2</span>, -<span class="keyword">this</span>.height / <span class="number">2</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">var</span> photo = <span class="keyword">new</span> PolaroidPhoto(<span class="string">'../assets/pug.jpg'</span>, &#123;</span><br><span class="line">    top: <span class="number">200</span>,</span><br><span class="line">    left: <span class="number">200</span>,</span><br><span class="line">    scaleX: <span class="number">0.2</span>,</span><br><span class="line">    scaleY: <span class="number">0.2</span></span><br><span class="line">  &#125;);</span><br><span class="line">  photo.on(<span class="string">'image:loaded'</span>, canvas.renderAll.bind(canvas));</span><br><span class="line">  photo.drawBorders = photo.drawCorners = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span> &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">makeHandler</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (e.target) &#123;</span><br><span class="line">        e.target.animate(<span class="string">'angle'</span>, arg, &#123;</span><br><span class="line">          duration: <span class="number">100</span>,</span><br><span class="line">          onChange: canvas.renderAll.bind(canvas)</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  canvas.on(&#123;</span><br><span class="line">    <span class="string">'mouse:down'</span>: makeHandler(<span class="string">'+10'</span>),</span><br><span class="line">    <span class="string">'mouse:up'</span>: makeHandler(<span class="string">'-10'</span>)</span><br><span class="line">  &#125;);</span><br><span class="line">  canvas.add(photo);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="以点拉线"><a href="#以点拉线" class="headerlink" title="以点拉线"></a>以点拉线</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="keyword">this</span>.__canvas = <span class="keyword">new</span> fabric.Canvas(<span class="string">'c'</span>, &#123; <span class="attr">selection</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">  fabric.Object.prototype.originX = fabric.Object.prototype.originY = <span class="string">'center'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">makeCircle</span>(<span class="params">left, top, line1, line2, line3, line4</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> c = <span class="keyword">new</span> fabric.Circle(&#123;</span><br><span class="line">      left: left,</span><br><span class="line">      top: top,</span><br><span class="line">      strokeWidth: <span class="number">5</span>,</span><br><span class="line">      radius: <span class="number">12</span>,</span><br><span class="line">      fill: <span class="string">'#fff'</span>,</span><br><span class="line">      stroke: <span class="string">'#666'</span></span><br><span class="line">    &#125;);</span><br><span class="line">    c.hasControls = c.hasBorders = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    c.line1 = line1;</span><br><span class="line">    c.line2 = line2;</span><br><span class="line">    c.line3 = line3;</span><br><span class="line">    c.line4 = line4;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">makeLine</span>(<span class="params">coords</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> fabric.Line(coords, &#123;</span><br><span class="line">      fill: <span class="string">'red'</span>,</span><br><span class="line">      stroke: <span class="string">'red'</span>,</span><br><span class="line">      strokeWidth: <span class="number">5</span>,</span><br><span class="line">      selectable: <span class="literal">false</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> line = makeLine([ <span class="number">250</span>, <span class="number">125</span>, <span class="number">250</span>, <span class="number">175</span> ]),</span><br><span class="line">      line2 = makeLine([ <span class="number">250</span>, <span class="number">175</span>, <span class="number">250</span>, <span class="number">250</span> ]),</span><br><span class="line">      line3 = makeLine([ <span class="number">250</span>, <span class="number">250</span>, <span class="number">300</span>, <span class="number">350</span>]),</span><br><span class="line">      line4 = makeLine([ <span class="number">250</span>, <span class="number">250</span>, <span class="number">200</span>, <span class="number">350</span>]),</span><br><span class="line">      line5 = makeLine([ <span class="number">250</span>, <span class="number">175</span>, <span class="number">175</span>, <span class="number">225</span> ]),</span><br><span class="line">      line6 = makeLine([ <span class="number">250</span>, <span class="number">175</span>, <span class="number">325</span>, <span class="number">225</span> ]);</span><br><span class="line"></span><br><span class="line">  canvas.add(line, line2, line3, line4, line5, line6);</span><br><span class="line"></span><br><span class="line">  canvas.add(</span><br><span class="line">    makeCircle(line.get(<span class="string">'x1'</span>), line.get(<span class="string">'y1'</span>), <span class="literal">null</span>, line),</span><br><span class="line">    makeCircle(line.get(<span class="string">'x2'</span>), line.get(<span class="string">'y2'</span>), line, line2, line5, line6),</span><br><span class="line">    makeCircle(line2.get(<span class="string">'x2'</span>), line2.get(<span class="string">'y2'</span>), line2, line3, line4),</span><br><span class="line">    makeCircle(line3.get(<span class="string">'x2'</span>), line3.get(<span class="string">'y2'</span>), line3),</span><br><span class="line">    makeCircle(line4.get(<span class="string">'x2'</span>), line4.get(<span class="string">'y2'</span>), line4),</span><br><span class="line">    makeCircle(line5.get(<span class="string">'x2'</span>), line5.get(<span class="string">'y2'</span>), line5),</span><br><span class="line">    makeCircle(line6.get(<span class="string">'x2'</span>), line6.get(<span class="string">'y2'</span>), line6)</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  canvas.on(<span class="string">'object:moving'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p = e.target;</span><br><span class="line">    p.line1 &amp;&amp; p.line1.set(&#123; <span class="string">'x2'</span>: p.left, <span class="string">'y2'</span>: p.top &#125;);</span><br><span class="line">    p.line2 &amp;&amp; p.line2.set(&#123; <span class="string">'x1'</span>: p.left, <span class="string">'y1'</span>: p.top &#125;);</span><br><span class="line">    p.line3 &amp;&amp; p.line3.set(&#123; <span class="string">'x1'</span>: p.left, <span class="string">'y1'</span>: p.top &#125;);</span><br><span class="line">    p.line4 &amp;&amp; p.line4.set(&#123; <span class="string">'x1'</span>: p.left, <span class="string">'y1'</span>: p.top &#125;);</span><br><span class="line">    canvas.renderAll();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="由滚动条控制图片"><a href="#由滚动条控制图片" class="headerlink" title="由滚动条控制图片"></a>由滚动条控制图片</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="keyword">this</span>.__canvas = <span class="keyword">new</span> fabric.Canvas(<span class="string">'c'</span>);</span><br><span class="line">  fabric.Object.prototype.transparentCorners = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> $ = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;<span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id)&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> rect = <span class="keyword">new</span> fabric.Rect(&#123;</span><br><span class="line">    width: <span class="number">100</span>,</span><br><span class="line">    height: <span class="number">100</span>,</span><br><span class="line">    top: <span class="number">100</span>,</span><br><span class="line">    left: <span class="number">100</span>,</span><br><span class="line">    fill: <span class="string">'rgba(255,0,0,0.5)'</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  canvas.add(rect);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> angleControl = $(<span class="string">'angle-control'</span>);</span><br><span class="line">  angleControl.onchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    rect.setAngle(<span class="built_in">parseInt</span>(<span class="keyword">this</span>.value, <span class="number">10</span>)).setCoords();</span><br><span class="line">    canvas.renderAll();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> scaleControl = $(<span class="string">'scale-control'</span>);</span><br><span class="line">  scaleControl.onchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    rect.scale(<span class="built_in">parseFloat</span>(<span class="keyword">this</span>.value)).setCoords();</span><br><span class="line">    canvas.renderAll();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> topControl = $(<span class="string">'top-control'</span>);</span><br><span class="line">  topControl.onchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    rect.setTop(<span class="built_in">parseInt</span>(<span class="keyword">this</span>.value, <span class="number">10</span>)).setCoords();</span><br><span class="line">    canvas.renderAll();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> leftControl = $(<span class="string">'left-control'</span>);</span><br><span class="line">  leftControl.onchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    rect.setLeft(<span class="built_in">parseInt</span>(<span class="keyword">this</span>.value, <span class="number">10</span>)).setCoords();</span><br><span class="line">    canvas.renderAll();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">updateControls</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    scaleControl.value = rect.getScaleX();</span><br><span class="line">    angleControl.value = rect.getAngle();</span><br><span class="line">    leftControl.value = rect.getLeft();</span><br><span class="line">    topControl.value = rect.getTop();</span><br><span class="line">  &#125;</span><br><span class="line">  canvas.on(&#123;</span><br><span class="line">    <span class="string">'object:moving'</span>: updateControls,</span><br><span class="line">    <span class="string">'object:scaling'</span>: updateControls,</span><br><span class="line">    <span class="string">'object:resizing'</span>: updateControls,</span><br><span class="line">    <span class="string">'object:rotating'</span>: updateControls</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="静态的canvas"><a href="#静态的canvas" class="headerlink" title="静态的canvas"></a>静态的canvas</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="keyword">this</span>.__canvas = <span class="keyword">new</span> fabric.StaticCanvas(<span class="string">'c'</span>);</span><br><span class="line"></span><br><span class="line">  canvas.add(</span><br><span class="line">    <span class="keyword">new</span> fabric.Rect(&#123; <span class="attr">top</span>: <span class="number">100</span>, <span class="attr">left</span>: <span class="number">100</span>, <span class="attr">width</span>: <span class="number">50</span>, <span class="attr">height</span>: <span class="number">50</span>, <span class="attr">fill</span>: <span class="string">'#f55'</span> &#125;),</span><br><span class="line">    <span class="keyword">new</span> fabric.Circle(&#123; <span class="attr">top</span>: <span class="number">140</span>, <span class="attr">left</span>: <span class="number">230</span>, <span class="attr">radius</span>: <span class="number">75</span>, <span class="attr">fill</span>: <span class="string">'green'</span> &#125;),</span><br><span class="line">    <span class="keyword">new</span> fabric.Triangle(&#123; <span class="attr">top</span>: <span class="number">300</span>, <span class="attr">left</span>: <span class="number">210</span>, <span class="attr">width</span>: <span class="number">100</span>, <span class="attr">height</span>: <span class="number">100</span>, <span class="attr">fill</span>: <span class="string">'blue'</span> &#125;)</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  fabric.Image.fromURL(<span class="string">'../lib/pug.jpg'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">img</span>) </span>&#123;</span><br><span class="line">    canvas.add(img.set(&#123; <span class="attr">left</span>: <span class="number">400</span>, <span class="attr">top</span>: <span class="number">350</span>, <span class="attr">angle</span>: <span class="number">30</span> &#125;).scale(<span class="number">0.25</span>));</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    canvas.item(<span class="number">0</span>).animate(<span class="string">'top'</span>, canvas.item(<span class="number">0</span>).getTop() === <span class="number">500</span> ? <span class="string">'100'</span> : <span class="string">'500'</span>, &#123; </span><br><span class="line">      duration: <span class="number">1000</span>,</span><br><span class="line">      onChange: canvas.renderAll.bind(canvas),</span><br><span class="line">      onComplete: animate</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  animate();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="对象外面包矩形"><a href="#对象外面包矩形" class="headerlink" title="对象外面包矩形"></a>对象外面包矩形</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="keyword">this</span>.__canvas = <span class="keyword">new</span> fabric.Canvas(<span class="string">'c'</span>);</span><br><span class="line">  fabric.Object.prototype.transparentCorners = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> rect = <span class="keyword">new</span> fabric.Rect(&#123;</span><br><span class="line">    left: <span class="number">100</span>,</span><br><span class="line">    top: <span class="number">50</span>,</span><br><span class="line">    width: <span class="number">100</span>,</span><br><span class="line">    height: <span class="number">100</span>,</span><br><span class="line">    fill: <span class="string">'green'</span>,</span><br><span class="line">    angle: <span class="number">20</span>,</span><br><span class="line">    padding: <span class="number">10</span></span><br><span class="line">  &#125;);</span><br><span class="line">  canvas.add(rect);</span><br><span class="line"></span><br><span class="line">  fabric.loadSVGFromURL(<span class="string">'../assets/15.svg'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">objects, options</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> shape = fabric.util.groupSVGElements(objects, options);</span><br><span class="line">    canvas.add(shape.scale(<span class="number">0.6</span>));</span><br><span class="line">    shape.set(&#123; <span class="attr">left</span>: <span class="number">200</span>, <span class="attr">top</span>: <span class="number">100</span> &#125;).setCoords();</span><br><span class="line">    canvas.renderAll();</span><br><span class="line"></span><br><span class="line">    canvas.forEachObject(<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> setCoords = obj.setCoords.bind(obj);</span><br><span class="line">      obj.on(&#123;</span><br><span class="line">        moving: setCoords,</span><br><span class="line">        scaling: setCoords,</span><br><span class="line">        rotating: setCoords</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  canvas.on(<span class="string">'after:render'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    canvas.contextContainer.strokeStyle = <span class="string">'#555'</span>;</span><br><span class="line"></span><br><span class="line">    canvas.forEachObject(<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> bound = obj.getBoundingRect();</span><br><span class="line"></span><br><span class="line">      canvas.contextContainer.strokeRect(</span><br><span class="line">        bound.left + <span class="number">0.5</span>,</span><br><span class="line">        bound.top + <span class="number">0.5</span>,</span><br><span class="line">        bound.width,</span><br><span class="line">        bound.height</span><br><span class="line">      );</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="元素移动到别的元素上时"><a href="#元素移动到别的元素上时" class="headerlink" title="元素移动到别的元素上时"></a>元素移动到别的元素上时</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="keyword">this</span>.__canvas = <span class="keyword">new</span> fabric.Canvas(<span class="string">'c'</span>);</span><br><span class="line">  fabric.Object.prototype.transparentCorners = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> rect1 = <span class="keyword">new</span> fabric.Rect(&#123;</span><br><span class="line">    width: <span class="number">200</span>, <span class="attr">height</span>: <span class="number">100</span>, <span class="attr">left</span>: <span class="number">0</span>, <span class="attr">top</span>: <span class="number">50</span>, <span class="attr">angle</span>: <span class="number">30</span>,</span><br><span class="line">    fill: <span class="string">'rgba(255,0,0,0.5)'</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> rect2 = <span class="keyword">new</span> fabric.Rect(&#123;</span><br><span class="line">    width: <span class="number">100</span>, <span class="attr">height</span>: <span class="number">100</span>, <span class="attr">left</span>: <span class="number">350</span>, <span class="attr">top</span>: <span class="number">250</span>, <span class="attr">angle</span>: <span class="number">-10</span>,</span><br><span class="line">    fill: <span class="string">'rgba(0,200,0,0.5)'</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> rect3 = <span class="keyword">new</span> fabric.Rect(&#123;</span><br><span class="line">    width: <span class="number">50</span>, <span class="attr">height</span>: <span class="number">100</span>, <span class="attr">left</span>: <span class="number">275</span>, <span class="attr">top</span>: <span class="number">350</span>, <span class="attr">angle</span>: <span class="number">45</span>,</span><br><span class="line">    stroke: <span class="string">'#eee'</span>, <span class="attr">strokeWidth</span>: <span class="number">10</span>,</span><br><span class="line">    fill: <span class="string">'rgba(0,0,200,0.5)'</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> circle = <span class="keyword">new</span> fabric.Circle(&#123;</span><br><span class="line">    radius: <span class="number">50</span>, <span class="attr">left</span>: <span class="number">275</span>, <span class="attr">top</span>: <span class="number">75</span>, <span class="attr">fill</span>: <span class="string">'#aac'</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> triangle = <span class="keyword">new</span> fabric.Triangle(&#123;</span><br><span class="line">    width: <span class="number">100</span>, <span class="attr">height</span>: <span class="number">100</span>, <span class="attr">left</span>: <span class="number">50</span>, <span class="attr">top</span>: <span class="number">300</span>, <span class="attr">fill</span>: <span class="string">'#cca'</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  canvas.add(rect1, rect2, rect3, circle, triangle);</span><br><span class="line">  canvas.on(&#123;</span><br><span class="line">    <span class="string">'object:moving'</span>: onChange,</span><br><span class="line">    <span class="string">'object:scaling'</span>: onChange,</span><br><span class="line">    <span class="string">'object:rotating'</span>: onChange,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onChange</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    options.target.setCoords();<span class="comment">//坐标</span></span><br><span class="line">    canvas.forEachObject(<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (obj === options.target) <span class="keyword">return</span>;</span><br><span class="line">      obj.setOpacity(options.target.intersectsWithObject(obj) ? <span class="number">0.5</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="关于mouse移动的一些操作"><a href="#关于mouse移动的一些操作" class="headerlink" title="关于mouse移动的一些操作"></a>关于mouse移动的一些操作</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  fabric.Object.prototype.originX = fabric.Object.prototype.originY = <span class="string">'center'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="keyword">this</span>.__canvas = <span class="keyword">new</span> fabric.Canvas(<span class="string">'c'</span>);</span><br><span class="line">  <span class="keyword">var</span> status = <span class="built_in">document</span>.getElementById(<span class="string">'status'</span>);</span><br><span class="line">  <span class="keyword">var</span> mouseShape;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// add shapes</span></span><br><span class="line">  <span class="keyword">var</span> shapes = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">1</span>; j &lt; <span class="number">40</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">var</span> circle = <span class="keyword">new</span> fabric.Circle(&#123;</span><br><span class="line">        radius: <span class="number">10</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">var</span> text = <span class="keyword">new</span> fabric.Text(i+<span class="string">','</span>+j, &#123;</span><br><span class="line">        fill: <span class="string">'#fff'</span>,</span><br><span class="line">        fontSize: <span class="number">8</span>,</span><br><span class="line">        fontFamily: <span class="string">'sans-serif'</span></span><br><span class="line">      &#125;);</span><br><span class="line">      shapes.push(<span class="keyword">new</span> fabric.Group([circle, text], &#123;</span><br><span class="line">        left: j * <span class="number">25</span>,</span><br><span class="line">        top: i * <span class="number">25</span>,</span><br><span class="line">        hasControls: <span class="literal">false</span></span><br><span class="line">      &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  canvas.add.apply(canvas, shapes);</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// cache the shapes</span></span><br><span class="line">    <span class="comment">// ??</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// disable editing</span></span><br><span class="line">    __canvas.selection = <span class="literal">false</span>;</span><br><span class="line">    __canvas.skipTargetFind = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// do some intensive animation</span></span><br><span class="line">    __canvas.on(<span class="string">'mouse:move'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> pos = __canvas.getPointer(o.e);</span><br><span class="line">        <span class="keyword">if</span> (mouseShape) &#123;</span><br><span class="line">          mouseShape.set(&#123; <span class="attr">left</span>: pos.x, <span class="attr">top</span>: pos.y &#125;);</span><br><span class="line">          __canvas.renderAll();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          mouseShape = <span class="keyword">new</span> fabric.Circle(&#123;</span><br><span class="line">            selectable: <span class="literal">false</span>,</span><br><span class="line">            radius: <span class="number">30</span>,</span><br><span class="line">            fill: <span class="string">'rgba(0,0,255,0.5)'</span>,</span><br><span class="line">            left: pos.x,</span><br><span class="line">            top: pos.y</span><br><span class="line">          &#125;);</span><br><span class="line">          __canvas.add(mouseShape);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    status.innerHTML = <span class="string">'started'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"start"</span>).addEventListener(<span class="string">"click"</span>, start);</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"stop"</span>).addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// remove shapes from cache</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ??</span></span><br><span class="line">    <span class="comment">// enable editing</span></span><br><span class="line">    __canvas.selection = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// remove animation</span></span><br><span class="line">    __canvas.off(<span class="string">'mouse:move'</span>);</span><br><span class="line">    __canvas.remove(mouseShape);</span><br><span class="line">    mouseShape = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    status.innerHTML = <span class="string">'stopped'</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  start();</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------------------------------------</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  fabric.util.addListener(fabric.window, <span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="keyword">this</span>.__canvas || <span class="keyword">this</span>.canvas,</span><br><span class="line">        canvases = <span class="keyword">this</span>.__canvases || <span class="keyword">this</span>.canvases;</span><br><span class="line"></span><br><span class="line">    canvas &amp;&amp; canvas.calcOffset &amp;&amp; canvas.calcOffset();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (canvases &amp;&amp; canvases.length) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = canvases.length; i &lt; len; i++) &#123;</span><br><span class="line">        canvases[i].calcOffset();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Canvas中两张图交互和包含时获取向对的元素</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> c = canvas.getActiveObject();</span><br><span class="line">  <span class="keyword">var</span> t;</span><br><span class="line"><span class="comment">//交互时获取另一个元素</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; canvas.getObjects().length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (canvas.getObjects()[i] === c) &#123;</span><br><span class="line">        ci = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断是否是交互的元素，一般为TRUE时是本身元素和被包含的元素</span></span><br><span class="line">    <span class="keyword">var</span> b = c.intersectsWithObject(canvas.getObjects()[i]);</span><br><span class="line">    <span class="keyword">if</span> (b &amp;&amp; canvas.getObjects()[i]!=c) &#123;</span><br><span class="line">        t = canvas.getObjects()[i];</span><br><span class="line">        <span class="keyword">if</span> (t === c) <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (canvas.getObjects()[i] === t) &#123;</span><br><span class="line">        ti = i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//包含时获取对应的元素</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; canvas.getObjects().length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (canvas.getObjects()[i] === c) &#123;</span><br><span class="line">      ci = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断是否是包含的元素，一般为TRUE时是本身元素和被包含的元素</span></span><br><span class="line">    <span class="keyword">var</span> b = c.isContainedWithinObject(canvas.getObjects()[i]);</span><br><span class="line">    <span class="keyword">if</span> (b &amp;&amp; canvas.getObjects()[i] != c) &#123;</span><br><span class="line">      t = canvas.getObjects()[i];</span><br><span class="line">      <span class="keyword">if</span> (t === c) <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (canvas.getObjects()[i] === t) &#123;</span><br><span class="line">      ti = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//被包含时获取对应的元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; canvas.getObjects().length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (canvas.getObjects()[i] === c) &#123;</span><br><span class="line">            ci = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断是否是被包含的元素，一般为TRUE时是本身元素和被包含的元素</span></span><br><span class="line">        <span class="keyword">var</span> b = canvas.getObjects()[i].isContainedWithinObject(c);</span><br><span class="line">        <span class="keyword">if</span> (b &amp;&amp; canvas.getObjects()[i] != c) &#123;</span><br><span class="line">            t = canvas.getObjects()[i];</span><br><span class="line">            <span class="keyword">if</span> (t === c) <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (canvas.getObjects()[i] === t) &#123;</span><br><span class="line">            ti = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//设置选中项</span></span><br><span class="line">  canvas.setActiveObject(canvasimg)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//设置可见</span></span><br><span class="line">  line2.set(&#123; <span class="attr">visible</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//设置图层</span></span><br><span class="line">FlowChar.sendToBack = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> activeObject = <span class="keyword">this</span>.canvas.getActiveObject();</span><br><span class="line">  <span class="keyword">if</span> (activeObject)</span><br><span class="line">  &#123;</span><br><span class="line">    canvas.sendToBack(activeObject);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line">canvas.on(<span class="string">'mouse:over'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.target.setFill(<span class="string">'red'</span>);</span><br><span class="line">    canvas.renderAll();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">15</span>; i--; ) &#123;</span><br><span class="line">    <span class="keyword">var</span> dim = fabric.util.getRandomInt(<span class="number">30</span>, <span class="number">60</span>);</span><br><span class="line">    <span class="keyword">var</span> klass = [<span class="string">'Rect'</span>, <span class="string">'Triangle'</span>, <span class="string">'Circle'</span>][fabric.util.getRandomInt(<span class="number">0</span>,<span class="number">2</span>)];</span><br><span class="line">    <span class="keyword">var</span> options = &#123;</span><br><span class="line">      top: fabric.util.getRandomInt(<span class="number">0</span>, <span class="number">600</span>),</span><br><span class="line">      left: fabric.util.getRandomInt(<span class="number">0</span>, <span class="number">600</span>),</span><br><span class="line">      fill: <span class="string">'green'</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (klass === <span class="string">'Circle'</span>) &#123;</span><br><span class="line">      options.radius = dim;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      options.width = dim;</span><br><span class="line">      options.height = dim;</span><br><span class="line">    &#125;</span><br><span class="line">    canvas.add(<span class="keyword">new</span> fabric[klass](options));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">//自由绘画</span></span><br><span class="line"><span class="keyword">var</span> canvas = <span class="keyword">new</span> fabric.Canvas(<span class="string">'c'</span>, &#123; <span class="attr">isDrawingMode</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//加载到集合中的位置</span></span><br><span class="line">canvas.insertAt(rect4,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取mouse光标在canvas中的位置</span></span><br><span class="line"></span><br><span class="line">canvas.on(<span class="string">"mouse:move"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> pointer=canvas.getPointer(o.e);</span><br><span class="line">$(<span class="string">"#div1"</span>).html(pointer.x+<span class="string">"---"</span>+pointer.y);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断选中的类型</span></span><br><span class="line">canvas.getActiveObject().type == <span class="string">"line"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//一些功能</span></span><br><span class="line">selectable,visible</span><br><span class="line"></span><br><span class="line"><span class="comment">//锁定移动</span></span><br><span class="line"><span class="keyword">var</span> activeObject = canvas.getActiveObject();</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">String</span>(activeObject.type) == <span class="string">"rect"</span>) &#123;</span><br><span class="line">    activeObject.lockMovementX = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    activeObject.lockMovementY = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//合并组</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> activeGroup = <span class="keyword">this</span>.canvas.getActiveGroup();</span><br><span class="line">  <span class="keyword">if</span> (activeGroup) &#123;</span><br><span class="line">    <span class="keyword">var</span> objectsInGroup = activeGroup.getObjects();</span><br><span class="line">    canvas.discardActiveGroup();</span><br><span class="line">    <span class="keyword">var</span> objs = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> obj <span class="keyword">in</span> objectsInGroup) &#123;</span><br><span class="line">        objs.push(objectsInGroup[obj]);</span><br><span class="line">        <span class="keyword">this</span>.canvas.remove(objectsInGroup[obj]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> group = <span class="keyword">new</span> fabric.Group(objs);</span><br><span class="line">    <span class="keyword">this</span>.canvas.add(group);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编历 canvas中元素的另一种方法</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; canvas.getObjects().length; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> elem = canvas.getObjects()[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定各个元素的方法</span></span><br><span class="line">canvas.on(<span class="string">'object:selected'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  alert(<span class="built_in">String</span>(options.target.type));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//mouse状态</span></span><br><span class="line">canvas.hoverCursor = <span class="string">'pointer'</span>;</span><br><span class="line">canvas.defaultCursor = <span class="string">'pointer'</span>;</span><br><span class="line">canvas.moveCursor = <span class="string">'pointer'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一些属性</span></span><br><span class="line"><span class="comment">// evented </span></span><br><span class="line"><span class="comment">// hasBorders // 没四边</span></span><br><span class="line"><span class="comment">// hasControls  // 不能控件</span></span><br><span class="line"><span class="comment">// hasRotatingPoint // 控制旋转点不可见</span></span><br><span class="line"><span class="comment">// includeDefaultValues // 为 false 时不可以序列化</span></span><br><span class="line"><span class="comment">// lockMovementX</span></span><br><span class="line"><span class="comment">// lockMovementY</span></span><br><span class="line"><span class="comment">// lockScalingX</span></span><br><span class="line"><span class="comment">// lockScalingY</span></span><br><span class="line"><span class="comment">// lockUniScaling // 只能成比例缩放</span></span><br><span class="line"><span class="comment">// selectable</span></span><br><span class="line"><span class="comment">// visible </span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 组中图片更换 src</span></span><br><span class="line">  <span class="keyword">var</span> objs = ao.getObjects();</span><br><span class="line">  <span class="keyword">var</span> t = objs[<span class="number">0</span>];</span><br><span class="line">  t._element.attributes[<span class="number">0</span>].nodeValue = isrc;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 循环去遍历实现置底效果</span></span><br><span class="line">  <span class="keyword">var</span> _allObjects = canvas.getObjects();</span><br><span class="line">  <span class="keyword">var</span> _tempObjects = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">  <span class="keyword">var</span> selectObject = canvas.getActiveObject();</span><br><span class="line">  _tempObjects.push(selectObject);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; _allObjects.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (_allObjects[i] != selectObject)</span><br><span class="line">      _tempObjects.push(_allObjects[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; _tempObjects.length; k++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; _allObjects.length; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (_tempObjects[k] == _allObjects[j]) &#123;</span><br><span class="line">        canvas.remove(_allObjects[j]);</span><br><span class="line">        canvas.add(_tempObjects[k]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  canvas.renderAll();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取元素位置</span></span><br><span class="line">  <span class="keyword">var</span> c = canvas.getActiveObject();</span><br><span class="line">  <span class="keyword">if</span> (c == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">  alert(canvas.getObjects().indexOf(c));</span><br><span class="line"></span><br><span class="line">  <span class="comment">//更换图片src</span></span><br><span class="line">  activeObject._element.src;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//无素框</span></span><br><span class="line">  <span class="keyword">var</span> bound = obj.getBoundingRect();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 你可以得到z - index:canvas.getObjects().indexOf(some_object)。</span></span><br><span class="line">  <span class="comment">// 四个命令可以改变叠加顺序:</span></span><br><span class="line">  <span class="comment">// some_object.sendBackwards()</span></span><br><span class="line">  <span class="comment">// some_object.sendToBack()</span></span><br><span class="line">  <span class="comment">// some_object.bringForward()</span></span><br><span class="line">  <span class="comment">// some_object.bringToFront()。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在一个固定的范圈内拖动</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> goodtop, goodleft, boundingObject;</span><br><span class="line"></span><br><span class="line">  canvas.on(<span class="string">"object:moving"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> obj = <span class="keyword">this</span>.relatedTarget;</span><br><span class="line">      <span class="keyword">var</span> bounds = boundingObject;</span><br><span class="line">      obj.setCoords();</span><br><span class="line">      <span class="keyword">if</span>(!obj.isContainedWithinObject(bounds))&#123;</span><br><span class="line">          obj.setTop(goodtop);</span><br><span class="line">          obj.setLeft(goodleft);</span><br><span class="line">          canvas.refresh();    </span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          goodtop = obj.top;</span><br><span class="line">          goodleft = obj.left;</span><br><span class="line">      &#125;  </span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">///////////////</span></span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="keyword">new</span> fabric.Canvas(<span class="string">"bounded"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> boundingBox = <span class="keyword">new</span> fabric.Rect(&#123;</span><br><span class="line">    fill: <span class="string">"none"</span>,</span><br><span class="line">    width: <span class="number">600</span>,</span><br><span class="line">    height: <span class="number">400</span>,</span><br><span class="line">    hasBorders: <span class="literal">false</span>,</span><br><span class="line">    hasControls: <span class="literal">false</span>,</span><br><span class="line">    lockMovementX: <span class="literal">true</span>,</span><br><span class="line">    lockMovementY: <span class="literal">true</span>,</span><br><span class="line">    evented: <span class="literal">false</span>,</span><br><span class="line">    stroke: <span class="string">"red"</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> movingBox = <span class="keyword">new</span> fabric.Rect(&#123;</span><br><span class="line">    width: <span class="number">100</span>,</span><br><span class="line">    height: <span class="number">100</span>,</span><br><span class="line">    hasBorders: <span class="literal">false</span>,</span><br><span class="line">    hasControls: <span class="literal">false</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  canvas.on(<span class="string">"object:moving"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> top = movingBox.top;</span><br><span class="line">    <span class="keyword">var</span> bottom = top + movingBox.height;</span><br><span class="line">    <span class="keyword">var</span> left = movingBox.left;</span><br><span class="line">    <span class="keyword">var</span> right = left + movingBox.width;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> topBound = boundingBox.top;</span><br><span class="line">    <span class="keyword">var</span> bottomBound = topBound + boundingBox.height;</span><br><span class="line">    <span class="keyword">var</span> leftBound = boundingBox.left;</span><br><span class="line">    <span class="keyword">var</span> rightBound = leftBound + boundingBox.width;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// capping logic here</span></span><br><span class="line">    movingBox.setLeft(<span class="built_in">Math</span>.min(<span class="built_in">Math</span>.max(left, leftBound), rightBound - movingBox.width));</span><br><span class="line">    movingBox.setTop(<span class="built_in">Math</span>.min(<span class="built_in">Math</span>.max(top, topBound), bottomBound - movingBox.height));</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  canvas.add(boundingBox);</span><br><span class="line">  canvas.add(movingBox);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//去掉边框</span></span><br><span class="line"></span><br><span class="line">  canvas.item(<span class="number">0</span>).hasControls = canvas.item(<span class="number">0</span>).hasBorders = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//mouse指针</span></span><br><span class="line">  canvas.hoverCursor = <span class="string">'pointer'</span>;</span><br><span class="line">  canvas.moveCursor = <span class="string">'pointer'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//指针样式</span></span><br><span class="line">  <span class="comment">//text是移动到文本上的那种效果 </span></span><br><span class="line">  <span class="comment">//wait是等待的那种效果 </span></span><br><span class="line">  <span class="comment">//default是默认效果 </span></span><br><span class="line">  <span class="comment">//e-resize是向右的箭头 </span></span><br><span class="line">  <span class="comment">//ne-resize是向右上的箭头 </span></span><br><span class="line">  <span class="comment">//n-resize是向上的箭头 </span></span><br><span class="line">  <span class="comment">//nw-resize是向左上的箭头 </span></span><br><span class="line">  <span class="comment">//w-resize是向左的箭头 </span></span><br><span class="line">  <span class="comment">//sw-resize是左下的箭头 </span></span><br><span class="line">  <span class="comment">//s-resize是向下的箭头 </span></span><br><span class="line">  <span class="comment">//se-resize是向右下的箭头 </span></span><br><span class="line">  <span class="comment">//auto是由系统自动给出效果</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  canvas.getActiveObject();</span><br><span class="line">  canvas.discardActiveObject(); </span><br><span class="line">  <span class="comment">//画图完成后可以选中</span></span><br><span class="line">  <span class="keyword">var</span> objs= canvas.getObjects();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> obj <span class="keyword">in</span> objs)</span><br><span class="line">      objs[obj].setCoords();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//循环canvas</span></span><br><span class="line">  canvas.forEachObject(<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;锁住&quot;&gt;&lt;a href=&quot;#锁住&quot; class=&quot;headerlink&quot; title=&quot;锁住&quot;&gt;&lt;/a&gt;锁住&lt;/h2&gt;&lt;p&gt;&lt;code&gt;lockMovementX&lt;/code&gt;   &lt;code&gt;lockMovementY&lt;/code&gt;      &lt;code&gt;loc
      
    
    </summary>
    
      <category term="H5游戏" scheme="http://yoursite.com/categories/H5%E6%B8%B8%E6%88%8F/"/>
    
    
      <category term="FabricJS" scheme="http://yoursite.com/tags/FabricJS/"/>
    
  </entry>
  
  <entry>
    <title>FabricJS 实战</title>
    <link href="http://yoursite.com/2019/01/24/%5BFabricjs%5DFabricJS%E5%AE%9E%E6%88%98/"/>
    <id>http://yoursite.com/2019/01/24/[Fabricjs]FabricJS实战/</id>
    <published>2019-01-24T06:49:02.000Z</published>
    <updated>2019-03-27T06:55:23.924Z</updated>
    
    <content type="html"><![CDATA[<p>  FabricJS是一个功能强大和简单的JS H5 的canvas库。<br>  Fabric提供了很多可以互动的canvas元素，还在canvas上提供了SVG的语法分析器。</p><p>结合案例：一起使用</p><h2 id="1、demo1-构建矩形"><a href="#1、demo1-构建矩形" class="headerlink" title="1、demo1 构建矩形"></a>1、demo1 构建矩形</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  FabricJS是一个功能强大和简单的JS H5 的canvas库。&lt;br&gt;  Fabric提供了很多可以互动的canvas元素，还在canvas上提供了SVG的语法分析器。&lt;/p&gt;
&lt;p&gt;结合案例：一起使用&lt;/p&gt;
&lt;h2 id=&quot;1、demo1-构建矩形&quot;&gt;&lt;a h
      
    
    </summary>
    
      <category term="H5游戏" scheme="http://yoursite.com/categories/H5%E6%B8%B8%E6%88%8F/"/>
    
    
      <category term="FabricJS" scheme="http://yoursite.com/tags/FabricJS/"/>
    
  </entry>
  
  <entry>
    <title>Vue-Router知识点总结</title>
    <link href="http://yoursite.com/2018/11/24/%5BVue%5D%20Vue-Router%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/11/24/[Vue] Vue-Router知识点总结/</id>
    <published>2018-11-24T07:02:34.000Z</published>
    <updated>2018-11-24T08:57:51.914Z</updated>
    
    <content type="html"><![CDATA[<p><a href="#1、开始">1、开始</a><br><a href="#2、动态路由匹配">2、动态路由匹配</a><br><a href="#3、嵌套路由">3、嵌套路由</a><br><a href="#4、编程式的导航">4、编程式的导航</a><br><a href="#">5、</a><br><a href="#">6、</a><br><a href="#">7、</a><br><a href="#">8、</a></p><h3 id="1、开始"><a href="#1、开始" class="headerlink" title="1、开始"></a>1、开始</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue-router/dist/vue-router.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello App!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用 router-link 组件来导航. 通过传入 `to` 属性指定链接， &lt;router-link&gt; 默认会被渲染成一个 `&lt;a&gt;` 标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/foo"</span>&gt;</span>Go to Foo<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/bar"</span>&gt;</span>Go to Bar<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 路由出口, 路由匹配到的组件将渲染在这里 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ------ app.js Start ---------</span></span><br><span class="line"><span class="comment">// 0. 如果使用模块化机制编程，导入Vue 和 VueRouter，要调用 Vue.use(VueRouter)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 定义 (路由) 组件。可以从其他文件 import 进来</span></span><br><span class="line"><span class="keyword">const</span> Foo = &#123; <span class="attr">template</span>: <span class="string">'&lt;div&gt;foo&lt;/div&gt;'</span> &#125;</span><br><span class="line"><span class="keyword">const</span> Bar = &#123; <span class="attr">template</span>: <span class="string">'&lt;div&gt;bar&lt;/div&gt;'</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 定义路由</span></span><br><span class="line"><span class="comment">// 每个路由应该映射一个组件。 其中"component" 可以是通过 Vue.extend() 创建的组件构造器，或者只是一个组件配置对象</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/foo'</span>, <span class="attr">component</span>: Foo &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/bar'</span>, <span class="attr">component</span>: Bar &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建 router 实例，然后传 `routes` 配置</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes  <span class="comment">// (缩写) 相当于 routes: routes</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 创建和挂载根实例。</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br><span class="line"><span class="comment">// ------ app.js End ---------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ------ Home.vue Start ---------</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  computed: &#123;</span><br><span class="line">    username () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$route.params.username</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    goBack () &#123;</span><br><span class="line">      <span class="built_in">window</span>.history.length &gt; <span class="number">1</span></span><br><span class="line">        ? <span class="keyword">this</span>.$router.go(<span class="number">-1</span>)</span><br><span class="line">        : <span class="keyword">this</span>.$router.push(<span class="string">'/'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ------ Home.vue End ---------</span></span><br></pre></td></tr></table></figure><font color="#d00">可以在任何组件内通过 <code>this.$router</code> 访问路由器，也可以通过 <code>this.$route</code> 访问当前路由。</font><br><font color="#d00"><code>this.$router</code> 和 <code>router</code> 使用起来完全一样。使用 <code>this.$router</code> 的原因是我们并不想在每个独立需要封装路由的组件中都导入路由。</font><h3 id="2、动态路由匹配"><a href="#2、动态路由匹配" class="headerlink" title="2、动态路由匹配"></a>2、动态路由匹配</h3><p>使用场景：有一个User组件，对于所有ID各不相同的用户，都要使用这个组件来渲染。<code>/User/:id</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = &#123;</span><br><span class="line">  template: <span class="string">'&lt;div&gt;User &#123;&#123; $route.params.id &#125;&#125;&lt;/div&gt;'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    <span class="comment">// 动态路径参数 以冒号开头</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/user/:id'</span>, <span class="attr">component</span>: User &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><font color="#d00">当匹配到一个路由时，参数值会被设置到 this.$route.params，可以在每个组件内使用</font><br><code>$route</code> 对象还提供了其它有用的信息: <code>$route.params</code>，<code>$route.query</code> (如果 URL 中有查询参数)、<code>$route.hash</code> 等等。<br>模式<code>/user/:username</code>    可匹配 /user/evan，其中<code>$route.params</code>参数为 { username: ‘evan’ }<br>模式<code>/user/:username/post/:post_id</code>    可匹配 /user/evan/post/123，其中<code>$route.params</code>参数为    { username: ‘evan’, post_id: 123 }<br><br>当使用路由参数时，例如从 /user/foo 导航到 /user/bar，原来的组件实例会被复用。因为两个路由都渲染同个组件，比起销毁再创建，复用则显得更加高效。这也意味着组件的生命周期钩子不会再被调用。<br><br>复用组件时，想对路由参数的变化作出响应的方法，可以使用<code>watch</code>和<code>beforeRouteUpdate</code>导航守卫：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = &#123;</span><br><span class="line">  template: <span class="string">'...'</span>,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    <span class="string">'$route'</span> (to, <span class="keyword">from</span>) &#123;</span><br><span class="line">      <span class="comment">// 对路由变化作出响应...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteUpdate (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// react to route changes...</span></span><br><span class="line">    <span class="comment">// don't forget to call next()</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>有时同一个路径可以匹配多个路由，此时，匹配的优先级就按照路由的定义顺序：谁先定义的，谁的优先级就最高。<br><br>### 3、嵌套路由<br>在<code>&lt;router-view&gt;</code>中，渲染组件同样可以包含自己的嵌套<code>&lt;router-view&gt;</code>。要在嵌套的出口中渲染组件，需要在 VueRouter 的参数中使用 children 配置。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class="user"&gt;</span></span><br><span class="line"><span class="string">      &lt;h2&gt;User &#123;&#123; $route.params.id &#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">      &lt;router-view&gt;&lt;/router-view&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/user/:id'</span>, <span class="attr">component</span>: User,</span><br><span class="line">      children: [</span><br><span class="line">        <span class="comment">// 当 /user/:id 匹配成功，UserHome 会被渲染在 User 的 &lt;router-view&gt; 中</span></span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">''</span>, <span class="attr">component</span>: UserHome &#125;,</span><br><span class="line">        <span class="comment">// 当 /user/:id/profile 匹配成功，UserProfile 会被渲染在 User 的 &lt;router-view&gt; 中</span></span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">'profile'</span>, <span class="attr">component</span>: UserProfile &#125;,</span><br><span class="line">        <span class="comment">// 当 /user/:id/posts 匹配成功，UserPosts 会被渲染在 User 的 &lt;router-view&gt; 中</span></span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">'posts'</span>, <span class="attr">component</span>: UserPosts&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br><br>### 4、编程式的导航<br>在 Vue 实例内部，可以通过 <code>$router</code> 访问路由实例，调用 <code>this.$router.push</code>，该方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，则回到之前的 URL。<br>1、<code>router.push(location, onComplete?, onAbort?)</code><br>声明式：<code>&lt;router-link :to=&quot;...&quot;&gt;</code><br>编程式：<code>router.push(...)</code><br>可选的在 <code>router.push</code> 或 <code>router.replace</code> 中提供 <code>onComplete</code> 和 <code>onAbort</code> 回调作为第二个和第三个参数。<br>这些回调将会在导航成功完成 (在所有的异步钩子被解析之后) 或终止 (导航到相同的路由、或在当前导航完成之前导航到另一个不同的路由) 的时候进行相应的调用。<br><font color="#d00">如果目的地和当前路由相同，只有参数发生了改变 (比如从一个用户资料到另一个 /users/1 -&gt; /users/2)，需要使用 <code>beforeRouteUpdate</code> 来响应这个变化 (比如抓取用户信息)。</font><p>2、<code>router.replace(location, onComplete?, onAbort?)</code><br>不会向 <code>history</code> 添加新记录，而是替换掉当前的 history 记录<br>声明式：<code>&lt;router-link :to=&quot;...&quot; replace&gt;</code><br>编程式：<code>router.replace(...)</code></p><p>3、<code>router.go(n)</code><br>在 <code>history</code> 记录中向前或者后退n步，类似 window.history.go(n)。<br>如果 history 记录不够用，那就默默地失败。</p><p><code>router.push</code>、<code>router.replace</code>和<code>router.go</code>跟<code>window.history.pushState</code>、<code>window.history.replaceState</code>和<code>window.history.go</code>好像， 实际上它们确实是效仿<code>window.history</code>API 的<br>Vue Router 的导航方法 (<code>push</code>、<code>replace</code>、<code>go</code>) 在各类路由模式 (<code>history</code>、 <code>hash</code> 和 <code>abstract</code>) 下表现一致。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串</span></span><br><span class="line">router.push(<span class="string">'home'</span>)</span><br><span class="line"><span class="comment">// 对象 /home</span></span><br><span class="line">router.push(&#123; <span class="attr">path</span>: <span class="string">'home'</span> &#125;)</span><br><span class="line"><span class="comment">// 命名的路由 /user/123</span></span><br><span class="line">router.push(&#123; <span class="attr">name</span>: <span class="string">'user'</span>, <span class="attr">params</span>: &#123; <span class="attr">userId</span>: <span class="number">123</span> &#125;&#125;)</span><br><span class="line"><span class="comment">// 带查询参数，变成 /register?plan=private</span></span><br><span class="line">router.push(&#123; <span class="attr">path</span>: <span class="string">'register'</span>, <span class="attr">query</span>: &#123; <span class="attr">plan</span>: <span class="string">'private'</span> &#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userId = <span class="number">123</span></span><br><span class="line">router.push(&#123; <span class="attr">name</span>: <span class="string">'user'</span>, <span class="attr">params</span>: &#123; userId &#125;&#125;) <span class="comment">// -&gt; /user/123</span></span><br><span class="line">router.push(&#123; <span class="attr">path</span>: <span class="string">`/user/<span class="subst">$&#123;userId&#125;</span>`</span> &#125;) <span class="comment">// -&gt; /user/123</span></span><br><span class="line"><span class="comment">// 这里的 params 不生效</span></span><br><span class="line">router.push(&#123; <span class="attr">path</span>: <span class="string">'/user'</span>, <span class="attr">params</span>: &#123; userId &#125;&#125;) <span class="comment">// -&gt; /user</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在浏览器记录中前进一步，等同于 history.forward()</span></span><br><span class="line">router.go(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// 后退一步记录，等同于 history.back()</span></span><br><span class="line">router.go(<span class="number">-1</span>)</span><br><span class="line"><span class="comment">// 前进 3 步记录</span></span><br><span class="line">router.go(<span class="number">3</span>)</span><br><span class="line"><span class="comment">// 如果 history 记录不够用，那就默默地失败</span></span><br><span class="line">router.go(<span class="number">-100</span>)</span><br><span class="line">router.go(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><font color="#d00">如果提供了<code>path</code>，<code>params</code>会被忽略</font><h3 id="5、命名路由"><a href="#5、命名路由" class="headerlink" title="5、命名路由"></a>5、命名路由</h3><h3 id="6、命名视图"><a href="#6、命名视图" class="headerlink" title="6、命名视图"></a>6、命名视图</h3><h3 id="7、重定向和别名"><a href="#7、重定向和别名" class="headerlink" title="7、重定向和别名"></a>7、重定向和别名</h3><h3 id="8、路由组件传参"><a href="#8、路由组件传参" class="headerlink" title="8、路由组件传参"></a>8、路由组件传参</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;#1、开始&quot;&gt;1、开始&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#2、动态路由匹配&quot;&gt;2、动态路由匹配&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#3、嵌套路由&quot;&gt;3、嵌套路由&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#4、编程式的导航&quot;&gt;4、编程式的导航&lt;/a&gt;&lt;br&gt;&lt;a hr
      
    
    </summary>
    
      <category term="基础知识" scheme="http://yoursite.com/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>html和shtml</title>
    <link href="http://yoursite.com/2018/11/15/%5BH5%5Dhtml%E5%92%8Cshtml/"/>
    <id>http://yoursite.com/2018/11/15/[H5]html和shtml/</id>
    <published>2018-11-15T07:13:42.000Z</published>
    <updated>2018-11-15T07:31:29.397Z</updated>
    
    <content type="html"><![CDATA[<p>讲述<code>html</code>、<code>htm</code>、<code>shtml</code>和<code>shtm</code>的区别。<br>本质上都属于静态网页一种，<code>html</code>和<code>htm</code>属于纯静态，客户端浏览器读取 html 文件是什么就呈现给浏览者什么内容。<br>而<code>shtml</code>则可以使用SSI。</p><h3 id="html和htm的区别"><a href="#html和htm的区别" class="headerlink" title="html和htm的区别"></a>html和htm的区别</h3><p>.html与.htm均是静态网页后缀名，网页文件没有区别与区分，html与htm后缀网页后缀可以互换，对网页完全没有影响同时也没有区别。<br>可以认为html与htm没有本质区别，唯一区别即多与少一个“L”。</p><h3 id="shtml和shtm的区别"><a href="#shtml和shtm的区别" class="headerlink" title="shtml和shtm的区别"></a>shtml和shtm的区别</h3><p>shtml 命名的网页文件里，使用了ssi的一些指令，就像asp中的指令，可以在 shtml 文件中写入SSI指令，<br>当客户端访问这些 shtml 文件时，服务器端会把这些 shtml 文件进行读取和解释，把 shtml 文件中包含的 SSI 指令解释出来。</p><p>shtml 与 shtm 后缀的网页文件没有区别，后缀名可以互换，区别和 html 与 htm 一样多与少“L”。</p><h3 id="shtml中的SSI语法介绍"><a href="#shtml中的SSI语法介绍" class="headerlink" title="shtml中的SSI语法介绍"></a>shtml中的SSI语法介绍</h3><p>SSI：服务器端嵌入或者叫服务器端包含，是Server Side Include的简写。<br>SSI技术通过在文档中加入SSI指令，让服务器端在输出文档之前解析SSI指令，并把解析完的结果和文档一同输出给客户端。<br>SSI的指令格式为：<code>&lt;!-- #directive parameter=&quot;value&quot; --&gt;</code><br>其中，<code>directive</code>指令名，<code>parameter</code>指令参数，<code>value</code>指令参数值<br>可以看到，就是html注释，事实上，Web服务器开启了SSI，并且页面包含可以解析的指令，那么Web服务器就解析这个指令。<br>没开启SSI时，表示注释；开启后，表示解析的指令。</p><p>SSI包含的指令有<br><code>config</code>：修改 SSI 的默认设置。<br>config 参数有：<code>errmsg</code>：自定义的SSI执行错误信息；<code>timefmt</code>：定义日期和时间的格式；<code>sizefmt</code>：决定文件大小是以字节、千字节为单位表示。<br><code>echo</code>：显示环境变量<br><code>exec</code>：执行 CGI 脚本<br><code>flastmod</code> ：显示指定文件的最后修改日期<br><code>fsize</code>：显示指定文件的大小<br><code>include</code>：把其它文档插入到当前被解析的文档中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Date = <span class="comment">&lt;!--#echo var = "date_local" --&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- #config errmsg="这是自定义错误信息"--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>File Size = <span class="comment">&lt;!--#fsize file="filename.txt"--&gt;</span> bytes<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- #config timefmt="%y年%m月%d日"--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Date = <span class="comment">&lt;!--#echo var = "date_local" --&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--#config sizefmt="bytes"--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="comment">&lt;!--#fsize file="a.exe"--&gt;</span> bytes<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--#config sizefmt="abbrev"--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="comment">&lt;!--#fsize file="a.exe"--&gt;</span> kb<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>显示：<br>Date = Wednesday March 21 2018<br>File Size = 这是自定义错误信息 bytes  (因为filename.txt并不存在，因此显示了自定义的错误信息)<br>Date = 2018年3月21日<br>48,594,944 bytes<br>47,456 kb</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;讲述&lt;code&gt;html&lt;/code&gt;、&lt;code&gt;htm&lt;/code&gt;、&lt;code&gt;shtml&lt;/code&gt;和&lt;code&gt;shtm&lt;/code&gt;的区别。&lt;br&gt;本质上都属于静态网页一种，&lt;code&gt;html&lt;/code&gt;和&lt;code&gt;htm&lt;/code&gt;属于纯静态，客户端
      
    
    </summary>
    
      <category term="基础知识" scheme="http://yoursite.com/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="H5" scheme="http://yoursite.com/tags/H5/"/>
    
  </entry>
  
  <entry>
    <title>JS设计模式-面向对象编程.md</title>
    <link href="http://yoursite.com/2018/11/12/%5BJS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%5DJS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-1%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/11/12/[JS设计模式]JS设计模式-1面向对象编程/</id>
    <published>2018-11-12T08:16:12.000Z</published>
    <updated>2018-11-20T02:17:23.081Z</updated>
    
    <content type="html"><![CDATA[<p><a href="#chap1：JS基础知识">chap1：JS基础知识</a><br><a href="#chap2：面向对象编程">chap2：面向对象编程</a></p><p>提问给自己：<br>设计模式是什么？设计模式用在什么场景？设计模式解决了什么问题？设计模式怎么才能解决这个问题？</p><h3 id="chap1：JS基础知识"><a href="#chap1：JS基础知识" class="headerlink" title="chap1：JS基础知识"></a>chap1：JS基础知识</h3><p>几种函数编写方式，体会灵活性。</p><ol><li>函数定义式一：全局定义<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 验证姓名</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> checkPhone = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 验证电话号码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>缺点：全局变量，存在覆盖风险。<br>上述两种方法的不同点：下面一种需要提前声明。</p><ol start="2"><li>用对象收编变量<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> checkObject = &#123;</span><br><span class="line">  checkName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 验证姓名</span></span><br><span class="line">  &#125;,</span><br><span class="line">  checkPhone: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 验证电话号码</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以这样写</span></span><br><span class="line"><span class="keyword">var</span> checkObject = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">checkObject.checkName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 验证姓名</span></span><br><span class="line">&#125;;</span><br><span class="line">checkObject.checkPhone = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 验证电话号码</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><p>缺点：别人访问这个对象中的方法比较麻烦，不能复制一份；这个对象类在使用new 关键词创建新对象时，不能继承这些方法</p><ol start="3"><li>类函数的实现<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一、真假对象</span></span><br><span class="line"><span class="keyword">var</span> checkObject = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    checkName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 验证姓名</span></span><br><span class="line">    &#125;,</span><br><span class="line">    checkPhone: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 验证电话号码</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = checkObject();</span><br><span class="line">a.checkName();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二、类的定义</span></span><br><span class="line"><span class="keyword">var</span> CheckObject = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.checkName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  <span class="keyword">this</span>.checkPhone = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> CheckObject();</span><br><span class="line">a.checkName();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法三、原型方法</span></span><br><span class="line"><span class="keyword">var</span> CheckObject = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">CheckObject.prototype.checkName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">CheckObject.prototype.checkPhone = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法四、原型的另一种方法</span></span><br><span class="line"><span class="keyword">var</span> CheckObject = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">CheckObject.prototype = &#123;</span><br><span class="line">  checkName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  checkPhone: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> CheckObject();</span><br><span class="line">a.checkName();</span><br><span class="line">a.checkPhone();</span><br></pre></td></tr></table></figure></li></ol><p>方法一、表面上是一个对象，实际上返回了新的对象，使用时互不影响。<br>方法二、对类进行了实例化后，引用者都会有自己的一套属性和方法，新创建的对象都会对类的this上的属性和方法进行复制。<br>缺点：消耗大，每个新对象都会复制一份。<br>方法三和方法四不相同，不能混用，会存在原型覆盖的问题</p><h3 id="chap2：面向对象编程"><a href="#chap2：面向对象编程" class="headerlink" title="chap2：面向对象编程"></a>chap2：面向对象编程</h3><p>类的创建、数据的封装以及类之间的继承</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;#chap1：JS基础知识&quot;&gt;chap1：JS基础知识&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#chap2：面向对象编程&quot;&gt;chap2：面向对象编程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;提问给自己：&lt;br&gt;设计模式是什么？设计模式用在什么场景？设计模式解决了什么问题？设计模式
      
    
    </summary>
    
      <category term="JS设计模式" scheme="http://yoursite.com/categories/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="JS设计模式" scheme="http://yoursite.com/tags/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JS设计模式-技巧型模式.md</title>
    <link href="http://yoursite.com/2018/11/12/%5BJS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%5DJS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-5%E6%8A%80%E5%B7%A7%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/11/12/[JS设计模式]JS设计模式-5技巧型模式/</id>
    <published>2018-11-12T08:16:12.000Z</published>
    <updated>2018-11-12T08:21:27.451Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="JS设计模式" scheme="http://yoursite.com/categories/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="JS设计模式" scheme="http://yoursite.com/tags/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JS设计模式-创建型模式.md</title>
    <link href="http://yoursite.com/2018/11/12/%5BJS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%5DJS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-2%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/11/12/[JS设计模式]JS设计模式-2创建型模式/</id>
    <published>2018-11-12T08:16:12.000Z</published>
    <updated>2018-11-12T09:21:43.424Z</updated>
    
    <content type="html"><![CDATA[<p><a href="#chap3：简单工厂模式">chap3：简单工厂模式</a><br><a href="#chap4：工厂方法模式">chap4：工厂方法模式</a><br><a href="#chap5：抽象工厂模式">chap5：抽象工厂模式</a><br><a href="#chap6：建造者模式">chap6：建造者模式</a><br><a href="#chap7：原型模式">chap7：原型模式</a><br><a href="#chap8：单例模式">chap8：单例模式</a></p><h3 id="chap3：简单工厂模式"><a href="#chap3：简单工厂模式" class="headerlink" title="chap3：简单工厂模式"></a>chap3：简单工厂模式</h3><p>核心知识：对象创建的几种方式</p><h3 id="chap4：工厂方法模式"><a href="#chap4：工厂方法模式" class="headerlink" title="chap4：工厂方法模式"></a>chap4：工厂方法模式</h3><p>核心知识：创建多类对象以及一种安全的创建方式</p><h3 id="chap5：抽象工厂模式"><a href="#chap5：抽象工厂模式" class="headerlink" title="chap5：抽象工厂模式"></a>chap5：抽象工厂模式</h3><p>核心知识：抽象类以及如何定义一种类簇</p><h3 id="chap6：建造者模式"><a href="#chap6：建造者模式" class="headerlink" title="chap6：建造者模式"></a>chap6：建造者模式</h3><p>核心知识：如何灵活地创建一种复杂的对象</p><h3 id="chap7：原型模式"><a href="#chap7：原型模式" class="headerlink" title="chap7：原型模式"></a>chap7：原型模式</h3><p>核心知识：JS的核心继承方式</p><h3 id="chap8：单例模式"><a href="#chap8：单例模式" class="headerlink" title="chap8：单例模式"></a>chap8：单例模式</h3><p>核心知识：单例模式及其实现与用途</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;#chap3：简单工厂模式&quot;&gt;chap3：简单工厂模式&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#chap4：工厂方法模式&quot;&gt;chap4：工厂方法模式&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#chap5：抽象工厂模式&quot;&gt;chap5：抽象工厂模式&lt;/a&gt;&lt;br&gt;&lt;a hr
      
    
    </summary>
    
      <category term="JS设计模式" scheme="http://yoursite.com/categories/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="JS设计模式" scheme="http://yoursite.com/tags/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JS设计模式-结构型模式.md</title>
    <link href="http://yoursite.com/2018/11/12/%5BJS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%5DJS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-6%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/11/12/[JS设计模式]JS设计模式-6结构型模式/</id>
    <published>2018-11-12T08:16:12.000Z</published>
    <updated>2018-11-12T08:21:32.069Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="JS设计模式" scheme="http://yoursite.com/categories/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="JS设计模式" scheme="http://yoursite.com/tags/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JS设计模式-行为型模式.md</title>
    <link href="http://yoursite.com/2018/11/12/%5BJS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%5DJS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-4%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/11/12/[JS设计模式]JS设计模式-4行为型模式/</id>
    <published>2018-11-12T08:16:12.000Z</published>
    <updated>2018-11-14T06:44:15.876Z</updated>
    
    <content type="html"><![CDATA[<p><a href="#chap16：模板方法模式">chap16：模板方法模式</a><br><a href="#chap17：观察者模式">chap17：观察者模式</a><br><a href="#chap18：状态模式">chap18：状态模式</a><br><a href="#chap19：策略模式">chap19：策略模式</a><br><a href="#chap20：职责链模式">chap20：职责链模式</a></p><h3 id="chap16：模板方法模式"><a href="#chap16：模板方法模式" class="headerlink" title="chap16：模板方法模式"></a>chap16：模板方法模式</h3><p>核心知识：基于模板类的拓展与创建</p><h3 id="chap17：观察者模式"><a href="#chap17：观察者模式" class="headerlink" title="chap17：观察者模式"></a>chap17：观察者模式</h3><p>核心知识：</p><h3 id="chap18：状态模式"><a href="#chap18：状态模式" class="headerlink" title="chap18：状态模式"></a>chap18：状态模式</h3><p>核心知识：</p><h3 id="chap19：策略模式"><a href="#chap19：策略模式" class="headerlink" title="chap19：策略模式"></a>chap19：策略模式</h3><p>核心知识：</p><h3 id="chap20：职责链模式"><a href="#chap20：职责链模式" class="headerlink" title="chap20：职责链模式"></a>chap20：职责链模式</h3><p>核心知识：</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;#chap16：模板方法模式&quot;&gt;chap16：模板方法模式&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#chap17：观察者模式&quot;&gt;chap17：观察者模式&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#chap18：状态模式&quot;&gt;chap18：状态模式&lt;/a&gt;&lt;br&gt;&lt;a hr
      
    
    </summary>
    
      <category term="JS设计模式" scheme="http://yoursite.com/categories/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="JS设计模式" scheme="http://yoursite.com/tags/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JS设计模式-架构型模式.md</title>
    <link href="http://yoursite.com/2018/11/12/%5BJS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%5DJS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-3%E6%9E%B6%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/11/12/[JS设计模式]JS设计模式-3架构型模式/</id>
    <published>2018-11-12T08:16:12.000Z</published>
    <updated>2018-11-12T09:23:57.599Z</updated>
    
    <content type="html"><![CDATA[<p><a href="#chap9：外观模式">chap9：外观模式</a><br><a href="#chap10：适配器模式">chap10：适配器模式</a><br><a href="#chap11：代理模式">chap11：代理模式</a><br><a href="#chap12：装饰者模式">chap12：装饰者模式</a><br><a href="#chap13：桥接模式">chap13：桥接模式</a><br><a href="#chap14：组合模式">chap14：组合模式</a><br><a href="#chap15：享元模式">chap15：享元模式</a></p><h3 id="chap9：外观模式"><a href="#chap9：外观模式" class="headerlink" title="chap9：外观模式"></a>chap9：外观模式</h3><p>核心知识：如何通过外观模式简化接口的使用</p><h3 id="chap10：适配器模式"><a href="#chap10：适配器模式" class="headerlink" title="chap10：适配器模式"></a>chap10：适配器模式</h3><p>核心知识：几种用途的适配器</p><h3 id="chap11：代理模式"><a href="#chap11：代理模式" class="headerlink" title="chap11：代理模式"></a>chap11：代理模式</h3><p>核心知识：代理思想用于跨域的解决方案</p><h3 id="chap12：装饰者模式"><a href="#chap12：装饰者模式" class="headerlink" title="chap12：装饰者模式"></a>chap12：装饰者模式</h3><p>核心知识：装饰者模式更友好地对于已有功能的拓展</p><h3 id="chap13：桥接模式"><a href="#chap13：桥接模式" class="headerlink" title="chap13：桥接模式"></a>chap13：桥接模式</h3><p>核心知识：桥接模式解决对象之间的依赖</p><h3 id="chap14：组合模式"><a href="#chap14：组合模式" class="headerlink" title="chap14：组合模式"></a>chap14：组合模式</h3><p>核心知识：组合模式如何优化系统的可拓展性</p><h3 id="chap15：享元模式"><a href="#chap15：享元模式" class="headerlink" title="chap15：享元模式"></a>chap15：享元模式</h3><p>核心知识：享元模式如何优化系统、提高性能</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;#chap9：外观模式&quot;&gt;chap9：外观模式&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#chap10：适配器模式&quot;&gt;chap10：适配器模式&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#chap11：代理模式&quot;&gt;chap11：代理模式&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#c
      
    
    </summary>
    
      <category term="JS设计模式" scheme="http://yoursite.com/categories/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="JS设计模式" scheme="http://yoursite.com/tags/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>深拷贝与浅拷贝</title>
    <link href="http://yoursite.com/2018/10/31/%5BJS%5D%20%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>http://yoursite.com/2018/10/31/[JS] 深拷贝与浅拷贝/</id>
    <published>2018-10-31T10:56:31.000Z</published>
    <updated>2018-11-15T09:47:14.261Z</updated>
    
    <content type="html"><![CDATA[<p>JS存储对象都是存地址的，所以浅拷贝会导致 obj1 和obj2 指向同一块内存地址。<br>改变了其中一方的内容，都是在原来的内存上做修改会导致拷贝对象和源对象都发生改变。<br>深拷贝是开辟一块新的内存地址，将原对象的各个属性逐个复制进去。对拷贝对象和源对象各自的操作互不影响。<br>对基本类型变量，浅拷贝是对值的拷贝，没有深拷贝的概念。</p><font color="#f00">深拷贝和浅拷贝是只针对Object和Array这样的对象数据类型的。</font><br><font color="#f00">浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存。<br>深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象。</font><h2 id="JS的变量类型"><a href="#JS的变量类型" class="headerlink" title="JS的变量类型"></a>JS的变量类型</h2><p>（1）基本类型：<br>5种基本数据类型Undefined、Null、Boolean、Number 和 String，变量是直接按值存放的，存放在栈内存中的简单数据段，可以直接访问。<br>（2）引用类型：<br>存放在堆内存中的对象，变量保存的是一个指针，这个指针指向另一个位置。当需要访问引用类型（如对象，数组等）的值时，首先从栈中获得该对象的地址指针，然后再从堆内存中取得所需的数据。</p><h2 id="浅拷贝的实现"><a href="#浅拷贝的实现" class="headerlink" title="浅拷贝的实现"></a>浅拷贝的实现</h2><h3 id="1、直接赋值一个变量"><a href="#1、直接赋值一个变量" class="headerlink" title="1、直接赋值一个变量"></a>1、直接赋值一个变量</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shallowClone</span>(<span class="params">copyObj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> ( <span class="keyword">var</span> i <span class="keyword">in</span> copyObj) &#123;</span><br><span class="line">    obj[i] = copyObj[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: &#123; <span class="attr">f</span>: &#123; <span class="attr">g</span>: <span class="number">1</span> &#125; &#125;,</span><br><span class="line">  c: [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> y = shallowClone(x);</span><br><span class="line"><span class="built_in">console</span>.log(y.b.f === x.b.f);     <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="2、Object-assign"><a href="#2、Object-assign" class="headerlink" title="2、Object.assign()"></a>2、Object.assign()</h3><p><code>Object.assign()</code> 方法可以把任意多个的源对象自身的可枚举属性拷贝给目标对象，然后返回目标对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: &#123; <span class="attr">f</span>: &#123; <span class="attr">g</span>: <span class="number">1</span> &#125; &#125;,</span><br><span class="line">  c: [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> y = <span class="built_in">Object</span>.assign(&#123;&#125;, x);</span><br><span class="line"><span class="built_in">console</span>.log(y.b.f === x.b.f);     <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><h3 id="3、Array-prototype-concat"><a href="#3、Array-prototype-concat" class="headerlink" title="3、Array.prototype.concat()"></a>3、Array.prototype.concat()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, &#123;</span><br><span class="line">  username: <span class="string">'kobe'</span></span><br><span class="line">&#125;];</span><br><span class="line"><span class="keyword">let</span> arr2=arr.concat();</span><br><span class="line">arr2[<span class="number">2</span>].username = <span class="string">'wade'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr);   <span class="comment">// 修改新对象会改到原对象</span></span><br></pre></td></tr></table></figure><h3 id="4、Array-prototype-slice"><a href="#4、Array-prototype-slice" class="headerlink" title="4、Array.prototype.slice()"></a>4、Array.prototype.slice()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, &#123;</span><br><span class="line">  username: <span class="string">' kobe'</span></span><br><span class="line">&#125;];</span><br><span class="line"><span class="keyword">let</span> arr3 = arr.slice();</span><br><span class="line">arr3[<span class="number">2</span>].username = <span class="string">'wade'</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);   <span class="comment">// 修改新对象会改到原对象</span></span><br></pre></td></tr></table></figure><p>Array的slice和concat方法不修改原数组，只会返回一个浅复制了原数组中的元素的一个新数组。<br>原数组的元素会按照下述规则拷贝：<br>1、如果该元素是个对象引用(不是实际的对象)，slice 会拷贝这个对象引用到新的数组里。两个对象引用都引用了同一个对象。如果被引用的对象发生改变，则新的和原来的数组中的这个元素也会发生改变。<br>2、对于字符串、数字及布尔值来说（不是 String、Number 或者 Boolean 对象），slice 会拷贝这些值到新的数组里。在别的数组里修改这些字符串或数字或是布尔值，将不会影响另一个数组。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, &#123;</span><br><span class="line">  username: <span class="string">' kobe'</span></span><br><span class="line">&#125;];</span><br><span class="line"><span class="keyword">let</span> arr3 = arr.slice();</span><br><span class="line">arr3[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr,arr3);  </span><br><span class="line"><span class="comment">// [1, 3, &#123; username: ' kobe' &#125;];</span></span><br><span class="line"><span class="comment">// [1, 2, &#123; username: ' kobe' &#125;];</span></span><br></pre></td></tr></table></figure></p><h2 id="深拷贝的实现"><a href="#深拷贝的实现" class="headerlink" title="深拷贝的实现"></a>深拷贝的实现</h2><h3 id="1、JSON-parse-JSON-stringify"><a href="#1、JSON-parse-JSON-stringify" class="headerlink" title="1、JSON.parse(JSON.stringify())"></a>1、JSON.parse(JSON.stringify())</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, &#123;</span><br><span class="line">    username: <span class="string">' kobe'</span></span><br><span class="line">&#125;];</span><br><span class="line"><span class="keyword">let</span> arr4 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(arr));</span><br><span class="line">arr4[<span class="number">2</span>].username = <span class="string">'duncan'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr, arr4);</span><br><span class="line"><span class="comment">// [1, 3, &#123; username: ' kobe' &#125;];</span></span><br><span class="line"><span class="comment">// [1, 2, &#123; username: ' duncan' &#125;];</span></span><br></pre></td></tr></table></figure><p>原理：用JSON.stringify将对象转成JSON字符串，再用JSON.parse()把字符串解析成对象，一去一来，新的对象产生了，而且对象会开辟新的栈，实现深拷贝。</p><font color="#d00">缺点：</font><br>会抛弃对象的constructor，也就是深复制之后，无论这个对象原本的构造函数是什么，在深复制之后都会变成Object。<br>不过对象的constructor,没什么用，constructor属性不影响任何JavaScript的内部属性，只是JavaScript语言设计的历史遗留物，由于constructor属性是可以变更的，所以未必真的指向对象的构造函数，只是一个提示而已，只是在编程习惯上应该尽量让对象的constructor指向其构造函数<br><font color="#d00">另外诸如RegExp对象是无法通过这种方式深复制的。function也无法转成JSON，不能处理函数</font><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, &#123;</span><br><span class="line">    username: <span class="string">' kobe'</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;];</span><br><span class="line"><span class="keyword">let</span> arr4 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(arr));</span><br><span class="line">arr4[<span class="number">2</span>].username = <span class="string">'duncan'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr, arr4);</span><br><span class="line"><span class="comment">// [1, 3, &#123; username: ' kobe' &#125;, function()&#123;&#125;];</span></span><br><span class="line"><span class="comment">// [1, 2, &#123; username: ' duncan' &#125;, null];</span></span><br></pre></td></tr></table></figure><p>这是因为JSON.stringify() 方法是将一个JavaScript值(对象或者数组)转换为一个 JSON字符串，不能接受函数</p><h3 id="2、手写递归方法"><a href="#2、手写递归方法" class="headerlink" title="2、手写递归方法"></a>2、手写递归方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">a</span>: &#123;<span class="attr">name</span>: <span class="string">'小红'</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">arr</span>:[<span class="number">1</span>,<span class="number">2</span>]&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">initalObj, finalObj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = finalObj || &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> initalObj) &#123;</span><br><span class="line">    <span class="keyword">var</span> prop = initalObj[i];        <span class="comment">// 避免相互引用对象导致死循环，如initalObj.a = initalObj的情况</span></span><br><span class="line">    <span class="keyword">if</span>(prop === obj) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> prop === <span class="string">'object'</span>) &#123;</span><br><span class="line">      obj[i] = (prop.constructor === <span class="built_in">Array</span>) ? [] : &#123;&#125;;</span><br><span class="line">      <span class="built_in">arguments</span>.callee(prop, obj[i]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      obj[i] = prop;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line">deepClone(obj1, obj2);</span><br><span class="line">obj1.a.name = <span class="string">'test'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj1, obj2);</span><br><span class="line"><span class="comment">// &#123;a: &#123;name: 'test'&#125;, b: 2, arr:[1,2]&#125;</span></span><br><span class="line"><span class="comment">// &#123;a: &#123;name: '小红'&#125;, b: 2, arr:[1,2]&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3、jquery的-extend"><a href="#3、jquery的-extend" class="headerlink" title="3、jquery的$.extend"></a>3、jquery的$.extend</h3><p>jQuery 的 $.extend 也能实现深拷贝，<code>$.extend(true, obj1, obj2)</code><br>如果需要用深拷贝，第一个参数为true即可。不用则可以省略true。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>);</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: &#123; <span class="attr">f</span>: &#123; <span class="attr">g</span>: <span class="number">1</span> &#125; &#125;,</span><br><span class="line">    c: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = $.extend(<span class="literal">true</span>, &#123;&#125;, obj1);</span><br><span class="line">obj1.b.f === obj2.b.f;    <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JS存储对象都是存地址的，所以浅拷贝会导致 obj1 和obj2 指向同一块内存地址。&lt;br&gt;改变了其中一方的内容，都是在原来的内存上做修改会导致拷贝对象和源对象都发生改变。&lt;br&gt;深拷贝是开辟一块新的内存地址，将原对象的各个属性逐个复制进去。对拷贝对象和源对象各自的操作互
      
    
    </summary>
    
      <category term="基础知识" scheme="http://yoursite.com/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>客户端存储技术.md</title>
    <link href="http://yoursite.com/2018/10/29/%5BJS%5D%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AD%98%E5%82%A8%E6%8A%80%E6%9C%AF/"/>
    <id>http://yoursite.com/2018/10/29/[JS] 客户端存储技术/</id>
    <published>2018-10-29T08:45:25.000Z</published>
    <updated>2018-10-29T13:04:42.605Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用的客户端存储方法有哪些？"><a href="#常用的客户端存储方法有哪些？" class="headerlink" title="常用的客户端存储方法有哪些？"></a>常用的客户端存储方法有哪些？</h2><p><code>cookie</code>：是客户端用来存储数据的一种选项，它既可以在客户端设置也可以在服务器端设置。cookie会跟随任意HTTP请求一起发送。是「浏览器」提供的一种机制。<br><code>sessionStorage</code>：严格用于一个浏览器会话中存储数据，因为数据在浏览器关闭后会立即删除<br><code>localStorage</code>：用于跨会话持久化地存储数据<br><code>indexedDB</code>：在浏览器中保存结构化数据的一种「数据库」<br>cookie：兼容性好，可以通过<code>document.cookie</code>访问它<br>缺点：1、增加了网络流量；2、它的数据容量有限，最多只能存储4KB的数据，浏览器之间各有不同；3、不安全。<br>SessionStorage、LocalStorage缺点：IE不支持 SessionStorage，低版本IE ( IE6, IE7 ) 不支持 LocalStorage，并且不支持查询语言<br>indexedDB：兼容性不好，未得到大部分浏览器的支持</p><h2 id="cookie、sessionStorage和localStorage的区别？"><a href="#cookie、sessionStorage和localStorage的区别？" class="headerlink" title="cookie、sessionStorage和localStorage的区别？"></a>cookie、sessionStorage和localStorage的区别？</h2><ol><li><p>存储时效：<br>cookie可以手动设置失效期，默认为会话级<br>sessionStorage的存储时长是会话级<br>localStorage的存储时长是永久，除非用户手动利用浏览器的工具删除</p></li><li><p>访问的局限性：<br>cookie可以设置路径path，所以它要比另外两个多了一层访问限制<br>localStorage和sessionStorage的访问限制是文档源级别，即协议、主机名和端口<br>cookie可以通过设置domain属性值，可以在不同二级域名下共享cookie，而Storage不可以，比如<a href="http://image.baidu.com的cookie" target="_blank" rel="noopener">http://image.baidu.com的cookie</a> <a href="http://map.baidu.com是可以访问的，前提是cookie的domain设置为http://baidu.com，而Storage是不可以的" target="_blank" rel="noopener">http://map.baidu.com是可以访问的，前提是cookie的domain设置为http://baidu.com，而Storage是不可以的</a></p></li><li><p>存储大小限制：<br>cookie适合存储少量数据，他的大小限制是个数进行限制，每个浏览器的限制数量不同<br>Storage可以存储数据的量较大，此外它是通过占用空间大小来做限制的，每个浏览器的实现也是不同的</p></li><li><p>操作方法：<br>cookie是作为document的属性存在，并没有提供标准的方法来直接操作cookie<br>Storage提供了setItem()和getItem()还有removeItem()方法，操作方便不易出错</p></li><li><p>其他：<br>cookie在发送http请求时，会将本地的cookie作为http头部信息传递给服务器<br>cookie可以由服务器通过http来设定</p></li></ol><h2 id="cookie由哪些部分组成？"><a href="#cookie由哪些部分组成？" class="headerlink" title="cookie由哪些部分组成？"></a>cookie由哪些部分组成？</h2><p>一般有以下几部分组成:<br><code>set cookie: name=value; domain=.mozilla.org; expires=Feb, 13-Mar-2018 11:47:50; path=/; secure</code><br>1、<code>name名称</code>：一个唯一确定cookie的名称，部分大小写，cookie的名字必须是经过URL编码的，一般可以采用某个前缀在加上当前时间的做法，这样的话名称能够确保是唯一的，也比较方便。<br>2、<code>value值</code>：存储在cookie中的字符串值，必须经过被URL编码<br>3、<code>domain域</code>：对于哪个域是有效的，如果没有设置的话，默认来自设置cookie的那个域，在上诉例子中就是.Mozilla.org<br>4、<code>expires失效时间</code>：表示cookie何时应该被删除的时间戳，这个日期是GMT格式的日期，如果设置是以前的时间，cookie会被立刻删除。上诉cookie的失效时间是Feb,13-Mar-2018 11:47:50。<br>5、<code>path路径</code>：指定域中的那个路径，应该想服务器发送cookie，/ 表示没有限制<br>6、<code>secure安全标志</code>：指定以后，cookie只有在使用SSL连接的时候才可以发送到服务器。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常用的客户端存储方法有哪些？&quot;&gt;&lt;a href=&quot;#常用的客户端存储方法有哪些？&quot; class=&quot;headerlink&quot; title=&quot;常用的客户端存储方法有哪些？&quot;&gt;&lt;/a&gt;常用的客户端存储方法有哪些？&lt;/h2&gt;&lt;p&gt;&lt;code&gt;cookie&lt;/code&gt;：是客
      
    
    </summary>
    
      <category term="基础知识" scheme="http://yoursite.com/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS设计模式</title>
    <link href="http://yoursite.com/2018/10/28/%5BJS%5D%20JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/10/28/[JS] JS设计模式/</id>
    <published>2018-10-28T09:46:34.000Z</published>
    <updated>2018-10-30T10:28:20.586Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="基础知识" scheme="http://yoursite.com/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>ES6基础知识—Symbol</title>
    <link href="http://yoursite.com/2018/10/26/%5BES6%5D%20ES6%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E2%80%94Symbol/"/>
    <id>http://yoursite.com/2018/10/26/[ES6] ES6基础知识—Symbol/</id>
    <published>2018-10-26T02:38:24.000Z</published>
    <updated>2018-10-29T13:04:42.600Z</updated>
    
    <content type="html"><![CDATA[<p><a href="#1、概述">1、概述</a><br><a href="#2、作为属性名的Symbol">2、作为属性名的Symbol</a><br><a href="#3、消除魔术字符串">3、消除魔术字符串</a><br><a href="#4、属性名的遍历">4、属性名的遍历</a><br><a href="#5、Symbol.for/Symbol.keyFor">5、Symbol.for/Symbol.keyFor</a></p><p>JS 有了第七种数据类型：Symbol，创建一个独一无二的值；它用于对象的属性，设计初衷是为了避免对象属性冲突的问题。要获取对象symbol类型的属性，要用<code>Object.getOwnPropertySymbols()</code>；还提供了<code>Symbol.for()</code>和<code>Symbol.keyFor()</code>方法用于搜索对应的symbol值。</p><h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><p>1、原始数据类型<code>Symbol</code>：防止属性名的冲突<br>2、它是 JS 语言的第七种数据类型，前六种是：undefined、null、Boolean、String、Number、Object。<br>3、Symbol 值不是对象，不能添加属性，基本上，它是一种类似于字符串的数据类型。<br>4、Symbol函数可以接受一个字符串作为参数，表示对 Symbol 实例的描述，主要是为了在控制台显示，或者转为字符串时，比较容易区分。<br>5、Symbol 的参数是一个对象，就会调用该对象的toString方法，将其转为字符串，然后才生成一个 Symbol 值。<br>6、Symbol函数的参数只是表示对当前 Symbol 值的描述，因此相同参数的Symbol函数的返回值是不相等的。<br>7、Symbol 值不能与其他类型的值进行运算，会报错<br>8、Symbol 值可以显式转为字符串，Symbol 值也可以转为布尔值，但是不能转为数值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>(<span class="string">'foo'</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>(<span class="string">'bar'</span>);</span><br><span class="line">s;  <span class="comment">// Symbol()</span></span><br><span class="line"><span class="keyword">typeof</span> s  <span class="comment">// "symbol"</span></span><br><span class="line">s1; <span class="comment">// Symbol(foo)</span></span><br><span class="line">s2; <span class="comment">// Symbol(bar)</span></span><br><span class="line">s1.toString() <span class="comment">// "Symbol(foo)"</span></span><br><span class="line">s2.toString() <span class="comment">// "Symbol(bar)"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5、Symbol 的参数是一个对象</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'abc'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> sym = <span class="built_in">Symbol</span>(obj);</span><br><span class="line">sym   <span class="comment">// Symbol(abc)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 7、Symbol 值不能与其他类型的值进行运算，会报错</span></span><br><span class="line"><span class="keyword">let</span> sym = <span class="built_in">Symbol</span>(<span class="string">'My symbol'</span>);</span><br><span class="line"><span class="string">"your symbol is "</span> + sym   <span class="comment">// TypeError: can't convert symbol to string</span></span><br><span class="line"><span class="string">`your symbol is <span class="subst">$&#123;sym&#125;</span>`</span> <span class="comment">// TypeError: can't convert symbol to string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Symbol 值可以显式转为字符串、布尔值，不能转为数值</span></span><br><span class="line"><span class="keyword">let</span> sym = <span class="built_in">Symbol</span>(<span class="string">'My symbol'</span>);</span><br><span class="line"><span class="built_in">String</span>(sym) <span class="comment">// 'Symbol(My symbol)'</span></span><br><span class="line">sym.toString() <span class="comment">// 'Symbol(My symbol)'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sym = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="built_in">Boolean</span>(sym) <span class="comment">// true</span></span><br><span class="line">!sym  <span class="comment">// false</span></span><br><span class="line"><span class="keyword">if</span> (sym) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>(sym) <span class="comment">// TypeError</span></span><br><span class="line">sym + <span class="number">2</span> <span class="comment">// TypeError</span></span><br></pre></td></tr></table></figure></p><h2 id="2、作为属性名的Symbol"><a href="#2、作为属性名的Symbol" class="headerlink" title="2、作为属性名的Symbol"></a>2、作为属性名的Symbol</h2><p>1、由于每一个 Symbol 值都是不相等的，这意味着 Symbol 值可以作为标识符，用于对象的属性名，就能保证不会出现同名的属性。<br>2、Symbol 值作为对象属性名时，不能用点运算符。<br>3、在对象的内部，使用 Symbol 值定义属性时，Symbol 值必须放在方括号之中。如果不放在方括号中，该属性的键名就是字符串，而不是所代表的那个 Symbol 值。<br>4、Symbol 值作为属性名时，该属性还是公开属性，不是私有属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySymbol = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="comment">// 第一种写法</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;&#125;;</span><br><span class="line">a[mySymbol] = <span class="string">'Hello!'</span>;</span><br><span class="line"><span class="comment">// 第二种写法</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  [mySymbol]: <span class="string">'Hello'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 第三种写法</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(a, mySymbol, &#123; <span class="attr">value</span>: <span class="string">'Hello!'</span> &#125;);</span><br><span class="line"><span class="comment">// 以上写法都得到同样结果</span></span><br><span class="line">a[mySymbol] <span class="comment">// "Hello!"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、在对象的内部使用 Symbol 值定义属性</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [s]: <span class="function"><span class="keyword">function</span> (<span class="params">arg</span>) </span>&#123; ... &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [s](arg) &#123; ... &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj[s](<span class="number">123</span>);</span><br></pre></td></tr></table></figure><h2 id="3、消除魔术字符串"><a href="#3、消除魔术字符串" class="headerlink" title="3、消除魔术字符串"></a>3、消除魔术字符串</h2><p>魔术字符串指的是，在代码之中多次出现、与代码形成强耦合的某一个具体的字符串或者数值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shapeType = &#123;</span><br><span class="line">  triangle: <span class="string">'Triangle'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 等价于 triangle 的值不影响</span></span><br><span class="line"><span class="keyword">const</span> shapeType = &#123;</span><br><span class="line">  triangle: <span class="built_in">Symbol</span>()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArea</span>(<span class="params">shape, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> area = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">switch</span> (shape) &#123;</span><br><span class="line">    <span class="keyword">case</span> shapeType.triangle:</span><br><span class="line">      area = <span class="number">.5</span> * options.width * options.height;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getArea(shapeType.triangle, &#123; <span class="attr">width</span>: <span class="number">100</span>, <span class="attr">height</span>: <span class="number">100</span> &#125;);</span><br></pre></td></tr></table></figure></p><h2 id="4、属性名的遍历"><a href="#4、属性名的遍历" class="headerlink" title="4、属性名的遍历"></a>4、属性名的遍历</h2><p>Symbol 作为属性名，该属性不会出现在<code>for...in</code>、<code>for...of</code>循环中，也不会被<code>Object.keys()</code>、<code>Object.getOwnPropertyNames()</code>、<code>JSON.stringify()</code>返回。但是，它也不是私有属性，有一个<code>Object.getOwnPropertySymbols</code>方法，可以获取指定对象的所有 Symbol 属性名。<br>1、<code>Object.getOwnPropertySymbols</code>方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。<br>2、<code>Reflect.ownKeys</code>方法可以返回所有类型的键名，包括常规键名和 Symbol 键名。<br>3、以 Symbol 值作为名称的属性，不会被常规方法遍历得到。我们可以利用这个特性，为对象定义一些非私有的、但又希望只用于内部的方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> a = <span class="built_in">Symbol</span>(<span class="string">'a'</span>);</span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">Symbol</span>(<span class="string">'b'</span>);</span><br><span class="line">obj[a] = <span class="string">'Hello'</span>;</span><br><span class="line">obj[b] = <span class="string">'World'</span>;</span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertySymbols(obj);  <span class="comment">// [Symbol(a), Symbol(b)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// `Reflect.ownKeys`方法</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>(<span class="string">'my_key'</span>)]: <span class="number">1</span>,</span><br><span class="line">  enum: <span class="number">2</span>,</span><br><span class="line">  nonEnum: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Reflect</span>.ownKeys(obj)    <span class="comment">//  ["enum", "nonEnum", Symbol(my_key)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以 Symbol 值作为名称的属性，不会被常规方法遍历得到。我们可以利用这个特性</span></span><br><span class="line"><span class="keyword">let</span> size = <span class="built_in">Symbol</span>(<span class="string">'size'</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Collection</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>[size] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  add(item) &#123;</span><br><span class="line">    <span class="keyword">this</span>[<span class="keyword">this</span>[size]] = item;</span><br><span class="line">    <span class="keyword">this</span>[size]++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> sizeOf(instance) &#123;</span><br><span class="line">    <span class="keyword">return</span> instance[size];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> x = <span class="keyword">new</span> Collection();</span><br><span class="line">Collection.sizeOf(x) <span class="comment">// 0</span></span><br><span class="line">x.add(<span class="string">'foo'</span>);</span><br><span class="line">Collection.sizeOf(x) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">Object</span>.keys(x) <span class="comment">// ['0']</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(x) <span class="comment">// ['0']</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertySymbols(x) <span class="comment">// [Symbol(size)]</span></span><br></pre></td></tr></table></figure></p><h2 id="5、Symbol-for-Symbol-keyFor"><a href="#5、Symbol-for-Symbol-keyFor" class="headerlink" title="5、Symbol.for/Symbol.keyFor"></a>5、Symbol.for/Symbol.keyFor</h2><p>1、<code>Symbol.for</code>方法重新使用同一个 Symbol 值。<code>Symbol.for()</code>与<code>Symbol()</code>这两种写法，都会生成新的 Symbol。它们的区别是，前者会被登记在全局环境中供搜索，后者不会。<code>Symbol.for()</code>不会每次调用就返回一个新的 Symbol 类型的值，而是会先检查给定的key是否已经存在，如果不存在才会新建一个值。<br>2、<code>Symbol()</code>写法没有登记机制，所以每次调用都会返回一个不同的值。<br>3、<code>Symbol.for</code>为 Symbol 值登记的名字，是全局环境的，可以在不同的 iframe 或 service worker 中取到同一个值。<br>4、<code>Symbol.keyFor</code>方法返回一个已登记的 Symbol 类型值的key。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Symbol</span>.for(<span class="string">"bar"</span>) === <span class="built_in">Symbol</span>.for(<span class="string">"bar"</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Symbol</span>(<span class="string">"bar"</span>) === <span class="built_in">Symbol</span>(<span class="string">"bar"</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、`Symbol.for`为 Symbol 值登记的名字，是全局环境的</span></span><br><span class="line">iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line">iframe.src = <span class="built_in">String</span>(<span class="built_in">window</span>.location);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(iframe);</span><br><span class="line">iframe.contentWindow.Symbol.for(<span class="string">'foo'</span>) === <span class="built_in">Symbol</span>.for(<span class="string">'foo'</span>)  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、`Symbol.keyFor`</span></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>.for(<span class="string">"foo"</span>);</span><br><span class="line"><span class="built_in">Symbol</span>.keyFor(s1) <span class="comment">// "foo"</span></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>(<span class="string">"foo"</span>);</span><br><span class="line"><span class="built_in">Symbol</span>.keyFor(s2) <span class="comment">// undefined  变量s2属于未登记的 Symbol 值</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;#1、概述&quot;&gt;1、概述&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#2、作为属性名的Symbol&quot;&gt;2、作为属性名的Symbol&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#3、消除魔术字符串&quot;&gt;3、消除魔术字符串&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#4、属性名的遍历&quot;&gt;4、属
      
    
    </summary>
    
      <category term="基础知识" scheme="http://yoursite.com/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>ES6基础知识—Set和Map数据结构</title>
    <link href="http://yoursite.com/2018/10/26/%5BES6%5D%20ES6%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E2%80%94Set%E5%92%8CMap%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2018/10/26/[ES6] ES6基础知识—Set和Map数据结构/</id>
    <published>2018-10-26T02:23:14.000Z</published>
    <updated>2018-10-29T13:04:42.600Z</updated>
    
    <content type="html"><![CDATA[<p><a href="#1、Set">1、Set</a><br><a href="#2、Set实例的属性和方法">2、Set实例的属性和方法</a><br><a href="#"></a><br><a href="#"></a></p><h2 id="1、Set"><a href="#1、Set" class="headerlink" title="1、Set"></a>1、Set</h2><p>1、Set类似于数组，但是成员的值都是唯一的，没有重复的值。<br>2、Set 内部判断两个值是否不同，使用的算法叫做“Same-value-zero equality”，类似于精确相等运算符（===），<br>主要的区别是NaN等于自身，而精确相等运算符认为NaN不等于自身。<br>3、在 Set 内部，两个NaN是相等。<br>4、由于两个空对象不相等，所以Set 内部视为两个值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例一</span></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>]);</span><br><span class="line">[...set]    <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例二</span></span><br><span class="line"><span class="keyword">const</span> items = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>]);</span><br><span class="line">items.size    <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例三</span></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>(<span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>));</span><br><span class="line">set.size    <span class="comment">// 56</span></span><br></pre></td></tr></table></figure></p><h2 id="2、Set实例的属性和方法"><a href="#2、Set实例的属性和方法" class="headerlink" title="2、Set实例的属性和方法"></a>2、Set实例的属性和方法</h2><p>1、属性<br><code>Set.prototype.constructor</code>：构造函数，默认就是Set函数。<br><code>Set.prototype.size</code>：返回Set实例的成员总数。<br>2、方法<br>Set 实例的方法分为两大类：操作方法（用于操作数据）和遍历方法（用于遍历成员）<br><code>Array.from</code>方法可以将 Set 结构转为数组。</p><p>操作方法（用于操作数据）<br><code>add(value)</code>：添加某个值，返回 Set 结构本身。<br><code>delete(value)</code>：删除某个值，返回一个布尔值，表示删除是否成功。<br><code>has(value)</code>：返回一个布尔值，表示该值是否为Set的成员。<br><code>clear()</code>：清除所有成员，没有返回值。</p><p>遍历方法（用于遍历成员）<br><code>keys()</code>：返回键名的遍历器<br><code>values()</code>：返回键值的遍历器<br><code>entries()</code>：返回键值对的遍历器<br><code>forEach()</code>：使用回调函数遍历每个成员</p><p>3、Set的遍历顺序就是插入顺序<br>4、<code>keys</code>方法、<code>values</code>方法、<code>entries</code>方法返回的都是遍历器对象。<br>由于 Set 结构没有键名，只有键值（或者说键名和键值是同一个值），所以keys方法和values方法的行为完全一致。<br>5、Set 结构的实例默认可遍历，它的默认遍历器生成函数就是它的values方法。这意味着，可以省略values方法，直接用for…of循环遍历 Set。<br>6、数组的<code>map</code>和<code>filter</code>方法也可以间接用于 Set。<br>7、使用 Set 可以很容易地实现并集（Union）、交集（Intersect）和差集（Difference）。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 去除数组重复成员</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dedupe</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(array));</span><br><span class="line">&#125;</span><br><span class="line">dedupe([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">[...new <span class="built_in">Set</span>([<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>])]; <span class="comment">// [3, 5, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 6、数组的`map`和`filter`方法也可以间接用于 Set。</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Set</span>([...new <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])].map(<span class="function"><span class="params">x</span> =&gt;</span> x * <span class="number">2</span>));  <span class="comment">// 返回Set结构：&#123;2, 4, 6&#125;</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Set</span>([...new <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])].filter(<span class="function"><span class="params">x</span> =&gt;</span> (x % <span class="number">2</span>) == <span class="number">0</span>));    <span class="comment">// 返回Set结构：&#123;2, 4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 7、使用 Set 可以很容易地实现并集（Union）、交集（Intersect）和差集（Difference）。</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]);</span><br><span class="line"><span class="comment">// 并集</span></span><br><span class="line"><span class="keyword">let</span> union = <span class="keyword">new</span> <span class="built_in">Set</span>([...a, ...b]);  <span class="comment">// Set &#123;1, 2, 3, 4&#125;</span></span><br><span class="line"><span class="comment">// 交集</span></span><br><span class="line"><span class="keyword">let</span> intersect = <span class="keyword">new</span> <span class="built_in">Set</span>([...a].filter(<span class="function"><span class="params">x</span> =&gt;</span> b.has(x)));  <span class="comment">// set &#123;2, 3&#125;</span></span><br><span class="line"><span class="comment">// 差集</span></span><br><span class="line"><span class="keyword">let</span> difference = <span class="keyword">new</span> <span class="built_in">Set</span>([...a].filter(<span class="function"><span class="params">x</span> =&gt;</span> !b.has(x)));  <span class="comment">// Set &#123;1&#125;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;#1、Set&quot;&gt;1、Set&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#2、Set实例的属性和方法&quot;&gt;2、Set实例的属性和方法&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1、Set&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="基础知识" scheme="http://yoursite.com/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>ES6基础知识—class类</title>
    <link href="http://yoursite.com/2018/10/25/%5BES6%5D%20ES6%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E2%80%94class%E7%B1%BB/"/>
    <id>http://yoursite.com/2018/10/25/[ES6] ES6基础知识—class类/</id>
    <published>2018-10-25T14:01:41.000Z</published>
    <updated>2018-10-29T13:04:42.601Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>1、constructor是构造方法，this代表实例对象<br>2、方法之间不需要逗号分隔<br>3、类的数据类型就是函数，类本身就指向构造函数<br>4、类的所有方法都定义在类的prototype属性上<br>5、实例的constructor方法 === 类原型的constructor方法<br>6、类的方法定义在prototype对象上，所以类的新方法可添加在prototype对象上。Object.assign方法可以很方便地一次向类添加多个方法。<br>7、prototype对象的constructor属性，直接指向“类”的本身，这与 ES5 的行为是一致的。<br>8、类的内部所有定义的方法，都是不可枚举的，这与 ES5 的行为是不一致的。<br>9、类的属性名，可以采用表达式。<br>10、类和模块的内部，默认就是严格模式，所以不需要使用use strict指定运行模式<br>11、constructor方法是类的默认方法，如果没有显式定义，一个空的constructor方法会被默认添加。<br>12、constructor 方法默认返回实例对象（即this），完全可以指定返回另外一个对象<br>13、类不存在变量提升（hoist），这一点与 ES5 完全不同，原因与继承有关<br>14、name属性总是返回紧跟在class关键字后面的类名。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4、类的所有方法都定义在类的prototype属性上</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;&#125;</span><br><span class="line">  toString() &#123;&#125;</span><br><span class="line">  toValue() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">Point.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;&#125;,</span><br><span class="line">  toString() &#123;&#125;,</span><br><span class="line">  toValue() &#123;&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">Point.prototype.constructor === Point <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5、实例的constructor方法 === 类原型的constructor方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> B();</span><br><span class="line">b.constructor === B.prototype.constructor <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 8、类的内部所有定义的方法，都是不可枚举的</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(x, y) &#123; &#125;</span><br><span class="line">  toString() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.keys(Point.prototype)  <span class="comment">// []</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(Point.prototype)   <span class="comment">// ["constructor","toString"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// toString方法是Point类内部定义的方法，它是不可枚举的。这一点与 ES5 的行为不一致。</span></span><br><span class="line"><span class="keyword">var</span> Point = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;&#125;;</span><br><span class="line">Point.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.keys(Point.prototype);    <span class="comment">// ["toString"]</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(Point.prototype);    <span class="comment">// ["constructor","toString"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 9、类的属性名，可以采用表达式。</span></span><br><span class="line"><span class="keyword">let</span> methodName = <span class="string">'getArea'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(length) &#123;&#125;</span><br><span class="line">  [methodName]() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 14、name属性总是返回紧跟在class关键字后面的类名。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;&#125;</span><br><span class="line">Point.name <span class="comment">// "Point"</span></span><br></pre></td></tr></table></figure><h2 id="2、类的实例对象"><a href="#2、类的实例对象" class="headerlink" title="2、类的实例对象"></a>2、类的实例对象</h2><p>1、实例的属性除非显式定义在其本身（即定义在this对象上），否则都是定义在原型上（即定义在class上）；<br>2、类的所有实例共享一个原型对象，与 ES5 一样。<br>3、可以通过实例的<code>__proto__</code>属性为“类”添加方法(必须谨慎，不推荐使用)。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">', '</span> + <span class="keyword">this</span>.y + <span class="string">')'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> point = <span class="keyword">new</span> Point(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">point.toString() <span class="comment">// (2, 3)</span></span><br><span class="line">point.hasOwnProperty(<span class="string">'x'</span>) <span class="comment">// true</span></span><br><span class="line">point.hasOwnProperty(<span class="string">'y'</span>) <span class="comment">// true</span></span><br><span class="line">point.hasOwnProperty(<span class="string">'toString'</span>) <span class="comment">// false</span></span><br><span class="line">point.__proto__.hasOwnProperty(<span class="string">'toString'</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Point(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Point(<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line">p1.__proto__ === p2.__proto__; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">p1.__proto__.printName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">'Oops'</span> &#125;;</span><br><span class="line">p1.printName() <span class="comment">// "Oops"</span></span><br><span class="line">p2.printName() <span class="comment">// "Oops"</span></span><br><span class="line"><span class="keyword">var</span> p3 = <span class="keyword">new</span> Point(<span class="number">4</span>,<span class="number">2</span>);</span><br><span class="line">p3.printName() <span class="comment">// "Oops"</span></span><br></pre></td></tr></table></figure></p><h2 id="3、私有方法和私有属性"><a href="#3、私有方法和私有属性" class="headerlink" title="3、私有方法和私有属性"></a>3、私有方法和私有属性</h2><p>1、在方法前加下划线，表示这是一个只限于内部使用的私有方法。<br>但是，这种命名是不保险的，在类的外部，还是可以调用到这个方法。<br>2、将私有方法移出模块。<br>3、利用<code>Symbol</code>值的唯一性，将私有方法的名字命名为一个Symbol值。<br>4、在属性名之前使用<code>#</code>表示.<br>5、私有属性也可以设置 getter 和 setter 方法<br>6、私有属性不限于从this引用，类的实例也可以引用私有属性<br>7、直接从实例上引用私有属性是不可以的，只能在类的定义中引用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 公有方法</span></span><br><span class="line">  foo (baz) &#123;</span><br><span class="line">    <span class="keyword">this</span>._bar(baz);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 私有方法</span></span><br><span class="line">  _bar (baz) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.snaf = baz;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2、将私有方法移出模块；</span></span><br><span class="line">  foo1 (baz) &#123;</span><br><span class="line">    bar.call(<span class="keyword">this</span>, baz);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">baz</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.snaf = baz;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、利用`Symbol`值的唯一性</span></span><br><span class="line"><span class="keyword">const</span> bar = <span class="built_in">Symbol</span>(<span class="string">'bar'</span>);</span><br><span class="line"><span class="keyword">const</span> snaf = <span class="built_in">Symbol</span>(<span class="string">'snaf'</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">myClass</span></span>&#123;</span><br><span class="line">  <span class="comment">// 公有方法</span></span><br><span class="line">  foo(baz) &#123;</span><br><span class="line">    <span class="keyword">this</span>[bar](baz);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 私有方法</span></span><br><span class="line">  [bar](baz) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>[snaf] = baz;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// bar和snaf都是Symbol值，导致第三方无法获取到它们，因此达到了私有方法和私有属性的效果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5、私有属性也可以设置 getter 和 setter 方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">  #xValue = 0;</span><br><span class="line">  get #x() &#123; return #xValue; &#125;</span><br><span class="line">  set #x(value) &#123;</span><br><span class="line">    this.#xValue = value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6、私有属性不限于从this引用，类的实例也可以引用私有属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  #privateValue = 42;</span><br><span class="line">  <span class="keyword">static</span> getPrivateValue(foo) &#123;</span><br><span class="line">    return foo.#privateValue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Foo.getPrivateValue(<span class="keyword">new</span> Foo()); <span class="comment">// 42</span></span><br></pre></td></tr></table></figure></p><h2 id="4、this-的指向"><a href="#4、this-的指向" class="headerlink" title="4、this 的指向"></a>4、this 的指向</h2><p>1、类的方法内部如果含有this，它默认指向类的实例。但不能单独使用该方法，很可能报错。<br>2、解决办法：在构造方法中绑定this。<br>3、解决办法：使用箭头函数。<br>4、解决办法：使用Proxy，获取方法的时候，自动绑定this。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">  printName(name = <span class="string">'there'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.print(<span class="string">`Hello <span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  print(text) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(text);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> logger = <span class="keyword">new</span> Logger();</span><br><span class="line"><span class="keyword">const</span> &#123; printName &#125; = logger;</span><br><span class="line">printName();  <span class="comment">// TypeError: Cannot read property 'print' of undefined</span></span><br><span class="line">logger.printName(); <span class="comment">// Hello there</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、在构造方法中绑定this</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.printName = <span class="keyword">this</span>.printName.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、使用箭头函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.printName = <span class="function">(<span class="params">name = <span class="string">'there'</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.print(<span class="string">`Hello <span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、使用Proxy</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selfish</span> (<span class="params">target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> cache = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line">  <span class="keyword">const</span> handler = &#123;</span><br><span class="line">    get (target, key) &#123;</span><br><span class="line">      <span class="keyword">const</span> value = <span class="built_in">Reflect</span>.get(target, key);</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> value !== <span class="string">'function'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!cache.has(value)) &#123;</span><br><span class="line">        cache.set(value, value.bind(target));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> cache.get(value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line">  <span class="keyword">return</span> proxy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> logger = selfish(<span class="keyword">new</span> Logger());</span><br></pre></td></tr></table></figure></p><h2 id="5、Class-的取值函数（getter）和存值函数（setter）"><a href="#5、Class-的取值函数（getter）和存值函数（setter）" class="headerlink" title="5、Class 的取值函数（getter）和存值函数（setter）"></a>5、Class 的取值函数（getter）和存值函数（setter）</h2><p>在“类”的内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  get prop() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'getter'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  set prop(value) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setter: '</span>+value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> inst = <span class="keyword">new</span> MyClass();</span><br><span class="line">inst.prop = <span class="number">123</span>;  <span class="comment">// setter: 123</span></span><br><span class="line">inst.prop;   <span class="comment">// 'getter'</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、简介&quot;&gt;&lt;a href=&quot;#1、简介&quot; class=&quot;headerlink&quot; title=&quot;1、简介&quot;&gt;&lt;/a&gt;1、简介&lt;/h2&gt;&lt;p&gt;1、constructor是构造方法，this代表实例对象&lt;br&gt;2、方法之间不需要逗号分隔&lt;br&gt;3、类的数据类型就是函数
      
    
    </summary>
    
      <category term="基础知识" scheme="http://yoursite.com/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>关于前端异常的捕获</title>
    <link href="http://yoursite.com/2018/10/25/%5BJS%5D%20%E5%85%B3%E4%BA%8E%E5%89%8D%E7%AB%AF%E5%BC%82%E5%B8%B8%E7%9A%84%E6%8D%95%E8%8E%B7/"/>
    <id>http://yoursite.com/2018/10/25/[JS] 关于前端异常的捕获/</id>
    <published>2018-10-25T09:47:42.000Z</published>
    <updated>2018-10-29T13:04:42.605Z</updated>
    
    <content type="html"><![CDATA[<p>开发过程中，有不少bug能够逃过各种test、QA、review，最终出现在线上，对于线上bug，如果没有足够的log分析，那会大大增加定位时间。所以不论前后端开发，日志系统都是必不可少的一个环节。前端日志系统不像后端有比较成熟统一的解决方案，对于前端异常日志的处理通常采用前端埋点或其它异常捕获方式收集错误日志，然后提交给服务器持久化。</p><h2 id="收集日志的方法"><a href="#收集日志的方法" class="headerlink" title="收集日志的方法"></a>收集日志的方法</h2><p>js的异常机制并不如其它编译型语言严谨，比如java中对可检查异常需要强制捕获处理，而js代码可能就会在运行时才发现有个异常直接导致线程终止。平时收集日志的手段，可以归类为两个方面，一个是逻辑中的错误判断，为主动判断；一个是利用语言给我们提供的捷径，暴力式获取错误信息，如 try..catch 和 window.onerror。所以在js项目中，更需要对异常捕获机制有统一约定，一般来说基本方法有几种：</p><h3 id="1-直接捕获"><a href="#1-直接捕获" class="headerlink" title="1.直接捕获"></a>1.直接捕获</h3><p>对于很明确的某些达到约定异常条件的（接口返回状态不对，客户端认证异常等），直接捕获提交服务端，在可预测范围内反馈异常并记录，比如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">asyncRequest(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="comment">// 接口返回的数据不在约定范围内，直接捕获提交</span></span><br><span class="line"> <span class="keyword">if</span> (data !== <span class="string">'someValue'</span>) &#123;</span><br><span class="line">   reportToServer(&#123;</span><br><span class="line">     <span class="comment">// error message</span></span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="2-主动判断"><a href="#2-主动判断" class="headerlink" title="2.主动判断"></a>2.主动判断</h3><p>我们在一些运算之后，得到一个期望的结果，然而结果不是我们想要的，这种属于逻辑错误/状态错误的反馈，在接口 status 判断中用的比较多。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calc</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// code...</span></span><br><span class="line">  <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(calc() !== <span class="string">"someVal"</span>)&#123;</span><br><span class="line">  Reporter.send(&#123;</span><br><span class="line">    position: <span class="string">"test.js::&lt;Function&gt;calc"</span></span><br><span class="line">    msg: <span class="string">"calc error"</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-try…catch-捕获"><a href="#3-try…catch-捕获" class="headerlink" title="3.try…catch 捕获"></a>3.try…catch 捕获</h3><p>java中如果某段代码可能抛出checked Exception，那么就需要强制在外层加上try…catch，类似于这样的处理机制，js中，在有可能抛出异常的地方，使用try…catch进行异常捕获处理，比如，对于一个有可能为undefined的数组参数arr，常规处理和try..catch方式对比：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// normal</span></span><br><span class="line"><span class="comment">// 会报TypeError: Cannot read property 'length' of undefined错误，并且线程终止</span></span><br><span class="line">doSomething(a.length);</span><br><span class="line">doOtherthings();</span><br><span class="line"><span class="comment">// try...catch</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"> doSomething(a.length);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line"> reportToServer(e);</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">'HaHa, I catch the error'</span>);</span><br><span class="line">&#125;</span><br><span class="line">doOtherthings();</span><br></pre></td></tr></table></figure></p><h3 id="4-window-onerror-window-addEventListener-‘error’"><a href="#4-window-onerror-window-addEventListener-‘error’" class="headerlink" title="4.window.onerror/window.addEventListener(‘error’)"></a>4.window.onerror/window.addEventListener(‘error’)</h3><p>捕获全局错误：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> errInfo = format(<span class="built_in">arguments</span>);</span><br><span class="line">  Reporter.send(errInfo);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>在上面的函数中返回 return true，错误便不会暴露到控制台中。下面是它的参数信息：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125;  errorMessage   错误信息</span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125;  scriptURI      出错的文件</span></span><br><span class="line"><span class="comment"> * @param &#123;Long&#125;    lineNumber     出错代码的行号</span></span><br><span class="line"><span class="comment"> * @param &#123;Long&#125;    columnNumber   出错代码的列号</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125;  errorObj       错误的详细信息，Anything</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">window</span>.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">errorMessage, scriptURI, lineNumber,columnNumber,errorObj</span>) </span>&#123; </span><br><span class="line">    <span class="comment">// code..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>window.addEventListener(&#39;error)</code>监听error事件时，只有一个ErrorEvent事件参数，继承自Event，包含以下属性：<br><code>ErrorEvent.message</code>：错误信息<br><code>ErrorEvent.filename</code>：出错文件位置<br><code>ErrorEvent.lineno</code>：出错位置行号<br><code>ErrorEvent.colno</code>：出错位置列号<br><code>ErrorEvent.error</code>：错误详细信息<br>window.onerror 算是一种特别暴力的容错手段，try..catch 也是如此，他们底层的实现就是利用 C/C++ 中的 goto 语句实现，一旦发现错误，不管目前的堆栈有多深，不管代码运行到了何处，直接跑到顶层或者 try..catch 捕获的那一层，这种一脚踢开错误的处理方式并不是很好。</p><h2 id="收集日志存在的问题"><a href="#收集日志存在的问题" class="headerlink" title="收集日志存在的问题"></a>收集日志存在的问题</h2><p>收集日志的目的是为了及时发现问题，最好日志能够告诉我们，错误在哪里，更优秀的做法是，不仅告诉错误在哪里，还告诉我们，如何处理这个错误。终极目标是，发现错误，自动容错，这一步是最难的。</p><h3 id="1-无具体报错信息，Script-error"><a href="#1-无具体报错信息，Script-error" class="headerlink" title="1.无具体报错信息，Script error."></a>1.无具体报错信息，Script error.</h3><p>具体原因 <a href="https://stackoverflow.com/questions/5913978/cryptic-script-error-reported-in-javascript-in-chrome-and-firefox" target="_blank" rel="noopener">可看这里</a>，修改方式为：<br>1、<font color="#d00">在script标签中加入crossorigin属性</font><br><code>&lt;script crossorigin=&quot;anonymous&quot; src=&quot;your.crossorigin.script&quot;&gt;&lt;/script&gt;</code><br>2、<font color="#d00">响应头增加Access-Control-Allow-Origin</font><br><code>Access-Control-Allow-Origin: *</code></p><h3 id="2-上报方式"><a href="#2-上报方式" class="headerlink" title="2.上报方式"></a>2.上报方式</h3><p>常使用的方式有两种：</p><font color="#d00">1、ajax请求上报</font><br><font color="#d00">2、利用img标签的src属性上报(考虑解析性能和多站点服务，更常用的上报方式)</font><p>需要注意的是，尽量避免简单直接的捕获–&gt; 上报这样的流程，可能造成日志量过大、阻塞用户操作等问题。所以一些错误合并、延迟上报、抽样采集还是有必要做的。</p><h2 id="压缩混淆的线上代码"><a href="#压缩混淆的线上代码" class="headerlink" title="压缩混淆的线上代码"></a>压缩混淆的线上代码</h2><p>对于线上经压缩混淆后的代码，即使拿到错误行列信息也很难去代码中定位问题，看到的解决方案有：  </p><p><font color="#d00">生成不同文件配合sourceMap</font></p><p><font color="#d00">后台实现功能：上传源码，选择压缩平台产生对应sourceMap，再通过转换将压缩的行列信息对应到源码的行列信息</font><br>这部分目前缺少实践经验，实践后再补充实现方案。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;开发过程中，有不少bug能够逃过各种test、QA、review，最终出现在线上，对于线上bug，如果没有足够的log分析，那会大大增加定位时间。所以不论前后端开发，日志系统都是必不可少的一个环节。前端日志系统不像后端有比较成熟统一的解决方案，对于前端异常日志的处理通常采用
      
    
    </summary>
    
      <category term="基础知识" scheme="http://yoursite.com/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>macrotasks&amp;microtasks执行顺序总结</title>
    <link href="http://yoursite.com/2018/10/23/%5BJS%5D%20macrotasks&amp;microtasks%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/10/23/[JS] macrotasks&amp;microtasks执行顺序总结/</id>
    <published>2018-10-23T13:15:43.000Z</published>
    <updated>2018-10-30T15:49:20.350Z</updated>
    
    <content type="html"><![CDATA[<p>macrotasks：<br><code>setTimeout</code>，<code>setInterval</code>， <code>setImmediate</code>，<code>requestAnimationFrame</code>, <code>I/O</code>，<code>UI渲染</code><br>microtasks:<br><code>Promise</code>， <code>process.nextTick</code>， <code>Object.observe</code>， <code>MutationObserver</code><br>再简单点可以总结为：</p><ol><li>在 macrotask 队列中执行最早的那个 task ，然后移出</li><li>再执行 microtask 队列中所有可用的任务，然后移出</li><li>下一个循环，执行下一个 macrotask 中的任务 (再跳到第2步)</li></ol><p>任务队列的总结<br>1、一个事件循环有一个或者多个任务队列；<br>2、每个事件循环都有一个microtask队列；<br>3、macrotask队列就是我们常说的任务队列，microtask队列不是任务队列；<br>4、一个任务可以被放入到macrotask队列，也可以放入microtask队列；<br>5、当一个任务被放入microtask或者macrotask队列后，准备工作就已经结束，这时候可以开始执行任务了。</p><p>microtasks 的作用是用来调度应在当前执行的脚本执行结束后立即执行的任务。例如响应事件、或者异步操作，以避免付出额外的一个task的费用。<br>microtask会在两种情况下执行：<br>任务队列(macrotask = task queue)回调后执行，前提条件是当前没有其他执行中的代码。每个task末尾执行。<br>另外在处理microtask期间，如果有新添加的microtasks，也会被添加到队列的末尾并执行。</p><p>也就是说执行顺序是：<br>开始 -&gt; 取task queue第一个task执行 -&gt; 取microtask全部任务依次执行 -&gt; 取task queue下一个任务执行 -&gt; 再次取出microtask全部任务执行 -&gt; … 这样循环往复<br>Promise一旦状态置为完成态，便为其回调(.then内的函数)安排一个microtask。<br>Promise是一个立即执行函数，但是其是否成功（或失败：reject）的回调函数resolve却是一个异步执行的回调。<br>当执行到resolve()时，这个任务会被放入到回调队列中，等待调用栈有空闲时事件循环再来取走它。</p><p>HTML5中规定setTimeout的最小时间延迟是4ms，也就是说理想环境下异步回调最快也是4ms才能触发。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">var</span> i=<span class="number">100000</span> ; i&gt;<span class="number">0</span> ; i-- )&#123;</span><br><span class="line">        i==<span class="number">1</span> &amp;&amp; resolve()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 3 5 4 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 当运行到setTimeout时，会把setTimeout的回调函数console.log(1)放到任务队列里去，然后继续向下执行。</span></span><br><span class="line"><span class="comment">// 2. 接下来会遇到一个Promise。首先执行打印console.log(2)，然后执行for循环，即时for循环要累加到10万，也是在执行栈里面，等待for循环执行完毕以后，将Promise的状态从fulfilled切换到resolve，随后把要执行的回调函数，也就是then里面的console.log(4)推到microtask里面去。接下来马上执行马上console.log(3)。</span></span><br><span class="line"><span class="comment">// 3. 然后出Promise，还剩一个同步的console.log(5)，直接打印。这样第一轮下来，已经依次打印了2，3，5。</span></span><br><span class="line"><span class="comment">// 4. 现在第一轮任务队列已经执行完毕，没有正在执行的代码。符合上面讲的microtask执行条件，因此会将microtask中的任务优先执行，因此执行console.log(4);</span></span><br><span class="line"><span class="comment">// 5. 最后还剩macrotask里的setTimeout放入的函数console.log(1)最后执行。</span></span><br></pre></td></tr></table></figure><font color="#d00"><br>当一个程序有：<code>setTimeout</code>， <code>setInterval</code>，<code>setImmediate</code>， <code>I/O</code>， <code>UI渲染</code>，<code>Promise</code>，<code>process.nextTick</code>， <code>Object.observe</code>， <code>MutationObserver</code>的时候：<br>1. 先执行 macrotasks：I/O –&gt; UI渲染<br>2. 再执行 microtasks ：process.nextTick –&gt; Promise –&gt; MutationObserver –&gt; Object.observe<br>3. 再把setTimeout setInterval setImmediate 塞入一个新的macrotasks，依次：<br>setImmediate –&gt; setTimeout ，setInterval<br><br>综上，nextTick的目的就是产生一个回调函数加入task或者microtask中，当前栈执行完以后（可能中间还有别的排在前面的函数）调用该回调函数，起到了异步触发（即下一个tick时触发）的目的。<br></font><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">setImmediate(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;,<span class="number">0</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">    resolve();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">5</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">6</span>);</span><br><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">7</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">8</span>);</span><br><span class="line"><span class="comment">// 结果是：3 4 6 8 7 5 1 2</span></span><br></pre></td></tr></table></figure><p>还有acync和await</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;macrotasks：&lt;br&gt;&lt;code&gt;setTimeout&lt;/code&gt;，&lt;code&gt;setInterval&lt;/code&gt;， &lt;code&gt;setImmediate&lt;/code&gt;，&lt;code&gt;requestAnimationFrame&lt;/code&gt;, &lt;code&gt;I/O&lt;
      
    
    </summary>
    
      <category term="基础知识" scheme="http://yoursite.com/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
</feed>
